@page "/TestTwitchInfo"

@using AspNet.Security.OAuth.Twitch
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Components.Account
@using Namezr.Features.Identity.Data
@using Namezr.Infrastructure.Data
@using Namezr.Infrastructure.Twitch
@using TwitchLib.Api.Helix.Models.Channels.GetFollowedChannels
@using TwitchLib.Api.Interfaces

@attribute [Authorize]

@inject ITwitchApiProvider TwitchApiProvider
@inject IdentityUserAccessor UserAccessor
@inject ApplicationDbContext DbContext

<h3>TestTwitchInfo</h3>

@if (_followedChannels is not null)
{
    <ul>
        @foreach (FollowedChannel channel in _followedChannels)
        {
            <li>
                @channel.BroadcasterName
            </li>
        }
    </ul>
}

@code {
    private FollowedChannel[]? _followedChannels;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        ApplicationUser user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        ITwitchAPI twitchApi = await TwitchApiProvider.GetTwitchApiForUser(user.Id);

        // TODO: figure out the API design for fetching user's connections, API, etc.
        ApplicationUserLogin userLogin = await DbContext.UserLogins
            .SingleAsync(x =>
                x.UserId == user.Id &&
                x.LoginProvider == TwitchAuthenticationDefaults.AuthenticationScheme
            );

        GetFollowedChannelsResponse response = await twitchApi.Helix.Channels
            .GetFollowedChannelsAsync(userLogin.ProviderKey);

        _followedChannels = response.Data;
    }

}