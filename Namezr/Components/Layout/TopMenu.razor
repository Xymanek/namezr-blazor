@using Microsoft.EntityFrameworkCore
@using Namezr.Components.Account
@using Namezr.Features.Creators.Data
@using Namezr.Features.Identity.Data
@using Namezr.Infrastructure.Data

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<header class="p-3 border-bottom">
    <div class="container">
        <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
            <a href="/" class="d-flex align-items-center mb-2 mb-lg-0 link-body-emphasis text-decoration-none">
                @*<svg class="bi me-2" width="40" height="32" role="img" aria-label="Bootstrap">
                        <use xlink:href="#bootstrap"></use>
                    </svg>*@
                @* <strong>Namezr</strong> *@
                <img src="logo-letter.png" alt="N" class="logo-letter"/>
                <span class="logo-text">amezr</span>
            </a>

            <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
                <li><a href="PublicCreatorsList" class="nav-link px-2 link-body-emphasis">Creators list</a></li>

                @if (_firstCreatorId is not null)
                {
                    <li>
                        <a href="studio/@_firstCreatorId.Value.NoHyphens()" class="nav-link px-2 link-body-emphasis">
                            Studio
                        </a>
                    </li>
                }
                else if (_isAuthenticated)
                {
                    <li>
                        <a href="studio/onboarding" class="nav-link px-2 link-body-emphasis">Creator onboarding</a>
                    </li>
                }
                else
                {
                    <li><a href="#" class="nav-link px-2 link-body-emphasis">For creators</a></li>
                }
            </ul>

            @* At some point, we will want a site-wide search bar, e.g. creators *@
            @*<form class="col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3" role="search">
                    <input type="search" class="form-control" placeholder="Search..." aria-label="Search">
                </form>*@

            <AuthorizeView>
                <Authorized>
                    <div class="dropdown text-end">
                        <a href="#" class="d-block link-body-emphasis text-decoration-none dropdown-toggle"
                           data-bs-toggle="dropdown" aria-expanded="false">
                            @context.User.Identity?.Name
                        </a>
                        <ul class="dropdown-menu text-small">
                            <li><a class="dropdown-item" href="#">My creators</a></li>
                            <li><a class="dropdown-item" href="Account/Manage">My account</a></li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li>
                                <form action="Account/Logout" method="post">
                                    <AntiforgeryToken/>
                                    <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                                    <button type="submit" class="dropdown-item">
                                        Logout
                                    </button>
                                </form>
                                @* <a class="dropdown-item" href="#">Sign out</a> *@
                            </li>
                        </ul>
                    </div>
                </Authorized>
                <NotAuthorized>
                    @* TODO: redirect back to current page *@
                    <a class="btn btn-primary" href="Account/Login">
                        Login
                    </a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</header>

@code {

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = null!;

    private string? _currentUrl;
    private bool _isAuthenticated;
    private Guid? _firstCreatorId;

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        ApplicationUser? user = await UserAccessor.GetUserAsync(HttpContext);

        if (user is not null)
        {
            _isAuthenticated = true;

            await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

            CreatorStaffEntity? staffEntity = await dbContext.CreatorStaff
                .Where(x => x.UserId == user.Id)
                .FirstOrDefaultAsync();

            _firstCreatorId = staffEntity?.CreatorId;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}