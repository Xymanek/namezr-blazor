@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Components.Account
@using Namezr.Features.Creators.Data
@using Namezr.Features.Identity.Data
@using Namezr.Infrastructure.Data

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<HxNavbar
    CssClass="bg-body-tertiary sticky-top"
    ContainerCssClass="@NavbarContainerCssClass"
    >
    <HxNavbarBrand>
        @*Navbar*@

        <img src="@Assets["logo-letter.png"]" alt="N" class="logo-letter"/>
        <span class="logo-text">amezr</span>
    </HxNavbarBrand>
    <HxNavbarToggler/>

    <HxNavbarCollapse>
        <HxNav CssClass="me-auto mb-2 mb-lg-0">
            <HxNavLink Href="/PublicCreatorsList">Creators list</HxNavLink>

            @if (_firstCreatorId is not null)
            {
                <HxNavLink Href=@($"studio/{_firstCreatorId.Value.NoHyphens()}")>
                    Studio
                </HxNavLink>
            }
            else if (_isAuthenticated)
            {
                <HxNavLink Href="studio/onboarding">
                    Creator onboarding
                </HxNavLink>
            }
            else
            {
                <HxNavLink Href="#">For creators</HxNavLink>
            }
        </HxNav>

        @* At some point, we will want a site-wide search bar, e.g. creators *@
        @*<EditForm Model="@query">
            <div class="d-flex">
                <HxInputText CssClass="me-2" Placeholder="Search" @bind-Value="@query"/>
                <HxSubmit Color="ThemeColor.Success" Outline="true">Search</HxSubmit>
            </div>
        </EditForm>*@

        <AuthorizeView>
            <Authorized>
                <HxDropdown>
                    @* TODO: why is the nav-link class not added automatically? *@
                    <HxDropdownToggleElement ElementName="a" Caret="true" role="button" CssClass="nav-link">
                        @context.User.Identity?.Name
                    </HxDropdownToggleElement>

                    <HxDropdownMenu Alignment="DropdownMenuAlignment.End">
                        <HxDropdownItemNavLink Href="#">My creators</HxDropdownItemNavLink>
                        <HxDropdownItemNavLink Href="Account/Manage">My account</HxDropdownItemNavLink>

                        <HxDropdownDivider/>

                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken/>
                            <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                            <button type="submit" class="dropdown-item">
                                Logout
                            </button>
                        </form>
                    </HxDropdownMenu>
                </HxDropdown>
            </Authorized>

            <NotAuthorized>
                @* TODO: redirect back to current page *@
                <a class="btn btn-primary" href="Account/Login">
                    Login
                </a>
                
                @* TODO: why component looks oof? *@
                @*<HxNavLink Href="Account/Login" CssClass="btn btn-primary">
                    Login
                </HxNavLink>*@
            </NotAuthorized>
        </AuthorizeView>
    </HxNavbarCollapse>
</HxNavbar>

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [Parameter]
    public string? NavbarContainerCssClass { get; set; }

    private string? _currentUrl;
    private bool _isAuthenticated;
    private Guid? _firstCreatorId;

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        ApplicationUser? user = await UserAccessor.GetUserAsync(HttpContext);

        if (user is not null)
        {
            _isAuthenticated = true;

            await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

            CreatorStaffEntity? staffEntity = await dbContext.CreatorStaff
                .Where(x => x.UserId == user.Id)
                .FirstOrDefaultAsync();

            _firstCreatorId = staffEntity?.CreatorId;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}