@using System.Text.Json
@using Namezr.Client
@using Namezr.Client.Shared

@inject IConfiguration Configuration

<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>

    <script>
        function @(ClientSentryBootstrap.FunctionName)() {
            return @SentryDsnLiteral;
        }
    </script>

    <link href="@Assets["_content/Havit.Blazor.Components.Web.Bootstrap/bootstrap.min.css"]" rel="stylesheet"/>

    <link rel="stylesheet" href="@Assets["app.css"]"/>
    <link rel="stylesheet" href="@Assets["Namezr.styles.css"]"/>

    @* TODO: conditional? @Assets? *@
    <link href="_content/BlazorColorPicker/colorpicker.css" rel="stylesheet"/>

    <ImportMap/>

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">

    <HeadOutlet/>
</head>

<body>
<Routes/>
<script src="_framework/blazor.web.js"></script>
@((MarkupString)HxSetup.RenderBootstrapJavaScriptReference())
<WasmTrigger/>

<BlazorColorPicker.ColorPicker @rendermode="InteractiveWebAssembly" />

@* Fancybox *@
<script src="@Assets["lib/fancybox/5.0.36/fancybox.umd.js"]"></script>
<link href="@Assets["lib/fancybox/5.0.36/fancybox.css"]" rel="stylesheet"/>
<script>
    Fancybox.bind("[data-fancybox]", {
        // Causes a page refresh when closing the gallery
        Hash: false,
    });
</script>
</body>

</html>

@code {

    private MarkupString SentryDsnLiteral
    {
        get
        {
            string? value = Configuration.GetValue<string?>("Sentry:ClientDsn");

            // The case is safe since we are inlining the result as JS literal.
            // And since JSON is a subset of JS literal, we are safe to not worry about escaping/escaping/etc.
            return (MarkupString)JsonSerializer.Serialize(value);
        }
    }

}