@page "/my-creators"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Creators.Data
@using Namezr.Features.Identity.Data
@using Namezr.Features.Identity.Helpers
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Namezr.Components

@attribute [Authorize]

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IdentityUserAccessor UserAccessor

<PageTitle>
    My creators
    <PublicTitleSuffix/>
</PageTitle>


<h2>MyCreators</h2>

@foreach (CreatorEntity creator in _creators)
{
    <h3>@creator.DisplayName</h3>

    <ul>
        @foreach (QuestionnaireEntity questionnaire in creator.Questionnaires!)
        {
            <li>
                <a href="/questionnaires/@questionnaire.Id.ToString("N")">
                    @questionnaire.Title
                </a>
            </li>
        }
    </ul>
}

@code {
    private CreatorEntity[] _creators = [];

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ApplicationUser user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _creators = await ConsumerUserRetriever.BuildConsumerUsersQuery(dbContext)
            .Where(tuple => tuple.UserLogin.UserId == user.Id)
            .Where(tuple => tuple.Consumer.SupportStatuses!.Any(status => status.IsActive))
            .Select(tuple => tuple.Consumer.SupportTarget.Creator)
            .Distinct()
            .Include(creator => creator.Questionnaires)
            .AsSplitQuery()
            .ToArrayAsync(HttpContext.RequestAborted);
    }

}