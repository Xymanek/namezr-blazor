@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Namezr.Features.Identity.Data
@using Namezr.Features.Identity.Helpers
@using Namezr.Infrastructure.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager

<PageTitle>
    Manage your logins
    <PublicTitleSuffix/>
</PageTitle>

<StatusMessage/>

@if (_currentLogins.Length > 0)
{
    <h3>Registered Logins</h3>

    <UserLoginsTable
        Logins="_currentLogins"
        ShowRemove="showRemoveButton"
    >
        <RemoveCellTemplate>
            <form
                @formname="@($"remove-login-{context.LoginProvider}-{context.ProviderKey}")"
                @onsubmit="OnSubmitAsync"
                method="post"
            >
                <AntiforgeryToken/>

                <input type="hidden" name="@nameof(LoginProvider)" value="@context.LoginProvider"/>
                <input type="hidden" name="@nameof(ProviderKey)" value="@context.ProviderKey"/>

                <HxSubmit
                    Color="ThemeColor.Danger"
                    Icon="BootstrapIcon.Trash"
                    title="Remove"
                />
            </form>
        </RemoveCellTemplate>
    </UserLoginsTable>
}

@if (newLoginSchemes?.Count > 0)
{
    <h4>Add another service to log in.</h4>
    <hr/>
    <ExternalLoginPicker
        ActionUrl="Account/Manage/LinkExternalLogin"
        ExternalLogins="newLoginSchemes"
        ReturnUrl="@NavigationManager.Uri"
    />
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<AuthenticationScheme>? newLoginSchemes;
    private bool showRemoveButton;
    private ApplicationUserLogin[] _currentLogins = [];

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private string? LoginProvider { get; set; }

    [SupplyParameterFromForm] private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _currentLogins = await dbContext.UserLogins
            .Include(login => login.ThirdPartyToken)
            .Where(login => login.UserId == user.Id)
            .OrderBy(login => login.LoginProvider)
            .ThenBy(login => login.ProviderKey)
            .ToArrayAsync(HttpContext.RequestAborted);

        newLoginSchemes = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .ToList();

        // string? passwordHash = null;
        // if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        // {
        //     passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        // }

        showRemoveButton = /*passwordHash is not null ||*/ _currentLogins.Length > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }

}