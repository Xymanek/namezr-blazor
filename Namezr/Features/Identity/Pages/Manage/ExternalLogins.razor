@page "/Account/Manage/ExternalLogins"

@using System.Drawing
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Namezr.Features.Identity.Data
@using Namezr.Features.Identity.Helpers
@using Namezr.Features.Identity.Services
@using Namezr.Helpers
@using Namezr.Infrastructure.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IEnumerable<ILoginContextProvider> LoginContextProviders
@inject ILogger<ExternalLogins> Logger
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<PageTitle>
    Manage your logins
    <PublicTitleSuffix/>
</PageTitle>

<StatusMessage/>
@if (currentLogins?.Length > 0)
{
    <h3>Registered Logins</h3>
    <table class="table">
        <tbody>
        @foreach ((ApplicationUserLogin login, LoginContext? context) in currentLogins)
        {
            <tr>
                <td>@login.ProviderDisplayName</td>
                <td>
                    @if (context is not null)
                    {
                        @if (context.ImageUrl is not null)
                        {
                            <img 
                                src="@context.ImageUrl" 
                                width="32" 
                                height="32" 
                                alt="@context.DisplayName profile picture"
                                class="rounded-circle me-2"
                            />
                        }

                        <span>@context.DisplayName</span>
                    }
                    else
                    {
                        <em>Failed to load</em>
                    }
                </td>
                <td style="width: 1%; white-space: nowrap;" class="px-3">
                    @if (showRemoveButton)
                    {
                        <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync"
                              method="post">
                            <AntiforgeryToken/>
                                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                                <HxSubmit
                                    Color="ThemeColor.Danger"
                                    Icon="BootstrapIcon.Trash"
                                    title="Remove"
                                />
                        </form>
                    }
                    else
                    {
                        @: &nbsp;
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (otherLogins?.Count > 0)
{
    <h4>Add another service to log in.</h4>
    <hr/>
    <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
        <AntiforgeryToken/>
        <div>
            <p>
                @foreach (var provider in otherLogins)
                {
                    <button type="submit" class="btn btn-primary" name="Provider" value="@provider.Name"
                            title="Log in using your @provider.DisplayName account">
                        @provider.DisplayName
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;
    private (ApplicationUserLogin login, LoginContext? context)[]? currentLogins;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private string? LoginProvider { get; set; }

    [SupplyParameterFromForm] private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        Dictionary<string, ILoginContextProvider> providers
            = LoginContextProviders.ToDictionary(x => x.Provider);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        ApplicationUserLogin[] userLogins = await dbContext.UserLogins
            .Include(login => login.ThirdPartyToken)
            .Where(login => login.UserId == user.Id)
            .OrderBy(login => login.LoginProvider)
            .ThenBy(login => login.ProviderKey)
            .ToArrayAsync(HttpContext.RequestAborted);

        // TODO: maybe streaming rendering is the correct approach here?
        CancellationTokenSource loginContextCts = CancellationTokenSource.CreateLinkedTokenSource(
            HttpContext.RequestAborted
        );
        loginContextCts.CancelAfter(TimeSpan.FromSeconds(2));

        currentLogins = await userLogins
            .Select(async login =>
            {
                return (login, context: await DoGet());

                async Task<LoginContext?> DoGet()
                {
                    try
                    {
                        return await providers[login.LoginProvider]
                            .GetLoginContextAsync(login, loginContextCts.Token)
                            .DiscardWhenCancelled(loginContextCts.Token);
                    }
                    catch (Exception e)
                    {
                        Logger.LogError(
                            e,
                            "Failed to get login context. Provider: {provider}. Key: {providerKey}",
                            login.LoginProvider, login.ProviderKey
                        );
                        return null;
                    }
                }
            })
            .WhenAll();

        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.login.LoginProvider))
            .ToList();

        // string? passwordHash = null;
        // if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        // {
        //     passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        // }

        showRemoveButton = /*passwordHash is not null ||*/ currentLogins.Length > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }

}