@page "/Account/Login"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Namezr.Features.Identity.Helpers

@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>
    Log in
    <PublicTitleSuffix/>
</PageTitle>

<h1>Log in</h1>

<StatusMessage />

<ExternalLoginPicker/>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Just redirect if already logged in
            if (await UserAccessor.GetUserAsync(HttpContext) != null)
            {
                Logger.LogTrace("User is already logged in, skipping login flow");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

}