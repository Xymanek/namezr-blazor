@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using Namezr.Features.Identity.Data
@using Namezr.Features.Identity.Helpers

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@* @inject IEmailSender<ApplicationUser> EmailSender *@
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject IOptionsMonitor<IdentityOptions> IdentityOptions

<PageTitle>
    Register
    <PublicTitleSuffix/>
</PageTitle>

<StatusMessage Message="@message"/>

@code {
    /* TODO: this is a giant mess, a quick hack from the default templates */

    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo? externalLoginInfo;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            Logger.LogInformation("External login failed: provider error: {ProviderError}", RemoteError);
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        ExternalLoginInfo? info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            Logger.LogWarning("External login failed: provider error: no external login information");
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            Logger.LogInformation("External login failed: not a login callback invocation");

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        if (externalLoginInfo is null)
        {
            Logger.LogWarning("External login failed: provider error: no external login information");
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogInformation(
                "External login failed: account lockout. Provider: {LoginProvider}. Name: {Name}",
                externalLoginInfo.LoginProvider,
                externalLoginInfo.Principal.Identity?.Name
            );
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then create an account.

        string email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        string username = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Name) ?? email;

        if (string.IsNullOrEmpty(email))
        {
            Logger.LogError(
                "External login failed: external service did not provide account email. Provider: {LoginProvider}. Name: {Name}",
                externalLoginInfo.LoginProvider,
                externalLoginInfo.Principal.Identity?.Name
            );
            RedirectManager.RedirectToWithStatus(
                "Account/Login",
                "External service did not provide account email",
                HttpContext
            );
        }

        if (
            await UserStore.FindByNameAsync(email, CancellationToken.None) != null || 
            await GetEmailStore().FindByEmailAsync(email, CancellationToken.None) != null
        )
        {
            Logger.LogInformation(
                "External login failed: user with this email exists already. " +
                "Provider: {LoginProvider}. Username: {UsernameName}. Email: {Email}",
                externalLoginInfo.LoginProvider,
                username,
                email
            );
            RedirectManager.RedirectToWithStatus(
                "Account/Login",
                "User with this username or email exists already. Please login using previously-linked service and link the new account trough My Account",
                HttpContext
            );
        }

        Input.Email = email;
        Input.Username = username;

        await OnValidSubmitAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        if (externalLoginInfo is null)
        {
            Logger.LogWarning("External login failed: provider error: no external login information");
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information during confirmation.", HttpContext);
        }

        var emailStore = GetEmailStore();
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, SanitizeUsername(Input.Username), CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailConfirmedAsync(user, true, CancellationToken.None);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                // var userId = await UserManager.GetUserIdAsync(user);
                // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";

        Logger.LogInformation(
            "External login failed: errors: {Errors}",
            result.Errors.Select(error => $"[{error.Code}] {error.Description}")
        );
        RedirectManager.RedirectToWithStatus("Account/Login", message, HttpContext);
    }

    private string SanitizeUsername(string username)
    {
        HashSet<char> allowedChars = IdentityOptions.CurrentValue.User.AllowedUserNameCharacters.ToHashSet();

        char[] sanitizedUsernameChars = username
            .Select(c => allowedChars.Contains(c) ? c : '_')
            .ToArray();

        return new string(sanitizedUsernameChars);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Username { get; set; } = "";

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }

}