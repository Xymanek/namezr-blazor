@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/submissions/{submissionId:guid}"

@using System.Diagnostics
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Components.Layout
@using Namezr.Features.Questionnaires.Data
@using Namezr.Features.Questionnaires.Services
@using Namezr.Infrastructure.Data
@using NodaTime
@using Microsoft.AspNetCore.Components.Sections
@using Namezr.Features.Questionnaires.Components
@using Namezr.Client.Shared
@using Namezr.Client.Types
@using Namezr.Features.Identity.Helpers
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Eligibility.Data
@using Namezr.Features.Creators.Services
@using Namezr.Components
@using Namezr.Client.Studio.Questionnaires
@using Namezr.Features.Questionnaires.Mappers

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IFieldValueSerializer ValueSerializer
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject IClock Clock
@inject IEligibilityService EligibilityService
@inject ISupportPlansService SupportPlansService

@if (_submission == null || _eligibilityResult is null)
{
    return;
}

<PageTitle>
    Submission |
    <StaticTruncatedText Text="@_submission.Version.Questionnaire.Title" MaxLength="25"/>
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <QuestionnaireBreadcrumbs
            Questionnaire="_submission.Version.Questionnaire"
        />

        <HxBreadcrumbItem
            Text="Submissions"
        />

        <HxBreadcrumbItem
            Href=@(NavigationManager.Uri)
            Text=@($"#{_submission.Number}")
        />
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    Submission details
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.ButtonsSectionId">
    @if (_submission.ApprovedAt is not null)
    {
        <EditForm Model="new object()" FormName="remove-approval" OnValidSubmit="HandleRemoveApproval">
            <HxSubmit
                Text="Remove approval"
                Color="@ThemeColor.Danger"
            />
        </EditForm>
    }
    else
    {
        <EditForm Model="new object()" FormName="grant-approval" OnValidSubmit="HandleGrantApproval">
            <HxSubmit
                Text="Approve"
                Color="@ThemeColor.Success"
            />
        </EditForm>
    }
</SectionContent>

<div class="d-flex flex-column gap-3">
    <table class="table table-striped mb-0">
        <tr>
            <th>User</th>
            <td>
                <a href="@($"/studio/{CreatorId.NoHyphens()}/supporters/users/{_submission.User.Id.NoHyphens()}")">
                    @_submission.User.UserName
                </a>
            </td>
        </tr>

        <tr>
            <th>Submitted</th>
            <td>
                <RelativeTime Value="_submission.SubmittedAt.ToDateTimeOffset()"/>
            </td>
        </tr>

        <tr>
            <th>Questionnaire version</th>
            <td>@_submission.VersionId</td>
        </tr>

        <tr>
            <th>Labels</th>
            <td>
                <AppliedLabelsManageableList
                    CreatorId="CreatorId"
                    SubmissionId="SubmissionId"
                    AppliedLabels="_appliedLabels"
                    PossibleLabels="_possibleLabels"
                />
            </td>
        </tr>

        <tr>
            <th>Is approved</th>
            <td>
                <div class="d-flex justify-content-between align-items-center gap-3">
                    <YesNoBadge Value="@(_submission.ApprovedAt is not null)"/>
                </div>
            </td>
        </tr>

        @if (_submission.ApprovedAt is not null)
        {
            <tr>
                <th>Approved</th>
                <td>
                    <RelativeTime Value="_submission.ApprovedAt.Value.ToDateTimeOffset()"/>
                </td>
            </tr>

            <tr>
                <th>Approved by</th>
                <td>@(_submission.ApproverId == null ? "System" : "Staff")</td>
            </tr>
        }
    </table>

    <table class="table table-striped mb-0">
        @foreach (QuestionnaireFieldConfigurationEntity fieldConfiguration in _submission.Version.Fields!)
        {
            string? valueSerialized = _submission.FieldValues!.SingleOrDefault(x => x.FieldId == fieldConfiguration.FieldId)?.ValueSerialized;
            SubmissionValueModel value = valueSerialized is null
                ? new()
                : ValueSerializer.Deserialize(
                    fieldConfiguration.Field.Type,
                    valueSerialized
                );

            <tr>
                <th>@fieldConfiguration.Title</th>
                <td>
                    @switch (fieldConfiguration.Field.Type)
                    {
                        case QuestionnaireFieldType.Text:
                            <pre>@value.StringValue</pre>
                            break;

                        case QuestionnaireFieldType.Number:
                            @value.NumberValue
                            break;

                        case QuestionnaireFieldType.FileUpload:
                            <div class="row">
                                @foreach (SubmissionFileData file in value.FileValue ?? [])
                                {
                                    /* TODO: test responsiveness */
                                    <div class="col-md-3">
                                        <SubmittedFile
                                            SubmissionId="SubmissionId"
                                            FileData="file"
                                        />
                                    </div>
                                }
                            </div>
                            break;

                        default:
                            throw new UnreachableException();
                    }
                </td>
            </tr>
        }
    </table>

    <HxCard>
        <HeaderTemplate>
            <div class="d-flex flex-row align-items-center gap-3">
                <span>
                    Eligibility
                </span>

                @if (!_eligibilityResult.Any)
                {
                    <span class="badge bg-danger">Ineligible</span>
                }
                else
                {
                    <span class="badge bg-success">Eligible</span>
                    <span class="badge bg-primary">
                        Weight: @_eligibilityResult.Modifier
                    </span>
                }
            </div>
        </HeaderTemplate>

        <BodyTemplate>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Support plan type</th>
                    <th>Support plan</th>
                    <th>Priority group</th>
                    <th>Weight</th>
                    <th style="width: 1%; white-space: nowrap;">Eligible</th>
                </tr>
                </thead>

                <tbody>
                @foreach (
                    EligibilityOptionEntity option in
                    _submission.Version.Questionnaire.EligibilityConfiguration.Options!
                )
                {
                    EligibilityPlan? eligibilityPlan = _eligibilityPlans.GetValueOrDefault(option.PlanId);

                    <tr>
                        <td>
                            @switch (eligibilityPlan?.Type)
                            {
                                case null:
                                    <i>Unknown</i>
                                    break;

                                case EligibilityType.Virtual:
                                    <span>Virtual</span>
                                    break;

                                case EligibilityType.SupportPlan:
                                    <span>@eligibilityPlan.SupportPlan?.ServiceType</span>
                                    break;

                                default:
                                    throw new UnreachableException();
                            }
                        </td>
                        <td>
                            @switch (eligibilityPlan?.Type)
                            {
                                case null:
                                    <i>Unknown</i>
                                    break;

                                case EligibilityType.Virtual:
                                    <span>@eligibilityPlan.VirtualEligibilityType</span>
                                    break;

                                case EligibilityType.SupportPlan:
                                    <span>@eligibilityPlan.SupportPlan?.DisplayName</span>
                                    break;

                                default:
                                    throw new UnreachableException();
                            }
                        </td>
                        <td>@option.PriorityGroup</td>
                        <td>@option.PriorityModifier</td>
                        <td style="width: 1%; white-space: nowrap; text-align: right;">
                            <YesNoBadge Value="@(_eligibilityResult.EligiblePlanIds.Contains(option.PlanId))"/>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </BodyTemplate>
    </HxCard>

    <HxCard BodyCssClass="gap-1">
        <HeaderTemplate>
            History
        </HeaderTemplate>

        <BodyTemplate>
            <div class="d-flex flex-column gap-3">
                <div class="d-flex gap-3 flex-wrap">
                    <div class="d-flex gap-2">
                        <HxIcon Icon="BootstrapIcon.Download"/>

                        <div>
                            <strong>Kexx</strong> downloaded <i>Character bin</i>
                        </div>
                    </div>

                    <div class="d-flex flex-grow-1">
                        <div class="flex-grow-1"></div>
                        <div>
                            @DateTime.Now.AddMinutes(-45).Humanize()
                        </div>
                    </div>
                </div>

                <div class="d-flex gap-3 flex-wrap">
                    <div class="d-flex gap-2">
                        <HxIcon Icon="BootstrapIcon.Download"/>

                        <div>
                            <strong>Kexx</strong> downloaded <i>Character bin</i>
                        </div>
                    </div>

                    <div class="d-flex flex-grow-1">
                        <div class="flex-grow-1"></div>
                        <div>
                            @DateTime.Now.AddMinutes(-45).Humanize()
                        </div>
                    </div>
                </div>

                @foreach (SubmissionHistoryEntryEntity entry in _submission.History!)
                {
                    <SubmissionHistoryEntry Entry="entry"/>
                }
            </div>
        </BodyTemplate>
    </HxCard>
</div>

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; } = null!;

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public Guid SubmissionId { get; set; }

    private QuestionnaireSubmissionEntity? _submission;
    private EligibilityResult? _eligibilityResult;
    private Dictionary<EligibilityPlanId, EligibilityPlan> _eligibilityPlans = [];

    private List<SubmissionLabelModel> _appliedLabels = [];
    private List<SubmissionLabelModel> _possibleLabels = [];

    protected override async Task OnInitializedAsync()
    {
        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _submission = await dbContext.QuestionnaireSubmissions
            .AsNoTracking()
            .AsSplitQuery()
            .Include(x => x.Version.Questionnaire.EligibilityConfiguration)
            .ThenInclude(x => x.Options!)
            .Include(x => x.Version.Fields!).ThenInclude(x => x.Field)
            .Include(x => x.FieldValues)
            .Include(x => x.User)
            .Include(x => x.Labels)
            .Include(x => x.History)
            .SingleOrDefaultAsync(x => x.Id == SubmissionId);

        // TODO: 404 if not found

        SubmissionLabelEntity[] possibleLabels = await dbContext.SubmissionLabels
            .Where(label => label.CreatorId == CreatorId)
            .ToArrayAsync();

        _appliedLabels = _submission!.Labels!.Select(SubmissionLabelMapper.ToModel).ToList();
        _possibleLabels = possibleLabels.Select(SubmissionLabelMapper.ToModel).ToList();

        _eligibilityPlans = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                await SupportPlansService.GetSupportPlans(_submission!.Version.Questionnaire.CreatorId)
            )
            .ToDictionary(plan => plan.Id);

        _eligibilityResult = await EligibilityService.ClassifyEligibility(
            _submission!.User.Id,
            _submission.Version.Questionnaire.EligibilityConfiguration,
            UserStatusSyncEagerness.MissingStatusOnly
        );
    }

    private async Task HandleGrantApproval()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        QuestionnaireSubmissionEntity submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .SingleAsync(x => x.Id == SubmissionId);

        submission.ApprovedAt = Clock.GetCurrentInstant();
        submission.ApproverId = (await UserAccessor.GetRequiredUserAsync(HttpContext)).Id;

        await dbContext.SaveChangesAsync();

        // Reload the page with new info
        NavigationManager.Refresh();
    }

    private async Task HandleRemoveApproval()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        QuestionnaireSubmissionEntity submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .SingleAsync(x => x.Id == SubmissionId);

        submission.ApprovedAt = null;
        submission.ApproverId = null;

        await dbContext.SaveChangesAsync();

        // Reload the page with new info
        NavigationManager.Refresh();
    }

}