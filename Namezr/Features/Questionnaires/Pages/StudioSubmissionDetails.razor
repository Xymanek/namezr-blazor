@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/submissions/{submissionId:guid}"

@using System.Diagnostics
@using Havit.Blazor.Components.Web.Bootstrap
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Components.Layout
@using Namezr.Features.Questionnaires.Data
@using Namezr.Features.Questionnaires.Services
@using Namezr.Infrastructure.Data
@using Microsoft.AspNetCore.Components.Forms
@using Namezr.Components.Account
@using NodaTime

@attribute [Authorize]
@layout StudioLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IFieldValueSerializer ValueSerializer
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject IClock Clock

@if (_submission is not null)
{
    <div class="d-flex gap-3 align-items-center justify-content-between">
        <h3>@_submission.Version.Questionnaire.Title</h3>
        <a
            href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()"
            class="btn btn-secondary">
            Questionnaire
        </a>
    </div>

    <div>
        <pre>@_submission.Version.Questionnaire.Description</pre>
    </div>

    <hr class="my-4"/>

    /* TODO: user info, eligibility breakdown, etc. */

    <table class="table table-striped">
        <tr>
            <th>User</th>
            <td>@_submission.User.UserName</td>
        </tr>

        <tr>
            <th>Submitted at</th>
            <td>@_submission.SubmittedAt</td>
        </tr>

        <tr>
            <th>Questionnaire version</th>
            <td>@_submission.VersionId</td>
        </tr>

        <tr>
            <th>Is approved</th>
            <td>
                <div class="d-flex justify-content-between align-items-center gap-3">
                    @if (_submission.ApprovedAt is not null)
                    {
                        <div>Yes</div>

                        <EditForm Model="new object()" FormName="remove-approval" OnValidSubmit="HandleRemoveApproval">
                            <HxSubmit
                                Text="Remove approval"
                                Color="@ThemeColor.Danger"
                            />
                        </EditForm>
                    }
                    else
                    {
                        <div>No</div>

                        <EditForm Model="new object()" FormName="grant-approval" OnValidSubmit="HandleGrantApproval">
                            <HxSubmit
                                Text="Approve"
                                Color="@ThemeColor.Success"
                            />
                        </EditForm>
                    }
                </div>
            </td>
        </tr>

        @if (_submission.ApprovedAt is not null)
        {
            <tr>
                <th>Approved at</th>
                <td>@_submission.ApprovedAt</td>
            </tr>

            <tr>
                <th>Approved by</th>
                <td>@(_submission.ApproverId == null ? "System" : "Staff")</td>
            </tr>
        }
    </table>

    <table class="table table-striped mt-4">
        @foreach (QuestionnaireFieldConfigurationEntity fieldConfiguration in _submission.Version.Fields!)
        {
            string? valueSerialized = _submission.FieldValues!.SingleOrDefault(x => x.FieldId == fieldConfiguration.FieldId)?.ValueSerialized;
            SubmissionValueModel value = valueSerialized is null
                ? new()
                : ValueSerializer.Deserialize(
                    fieldConfiguration.Field.Type,
                    valueSerialized
                );

            <tr>
                <th>@fieldConfiguration.Title</th>
                <td>
                    @switch (fieldConfiguration.Field.Type)
                    {
                        case QuestionnaireFieldType.Text:
                            <pre>@value.StringValue</pre>
                            break;

                        case QuestionnaireFieldType.Number:
                            @value.NumberValue
                            break;

                        case QuestionnaireFieldType.FileUpload:
                            <div class="row">
                                @foreach (SubmissionFileData file in value.FileValue ?? [])
                                {
                                    <div class="col-md-3">
                                        <SubmittedFile
                                            SubmissionId="SubmissionId"
                                            FileData="file"
                                        />
                                    </div>
                                }
                            </div>
                            break;

                        default:
                            throw new UnreachableException();
                    }
                </td>
            </tr>
        }
    </table>
}

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; } = null!;

    [CascadingParameter]
    public required StudioLayout StudioLayout { get; set; } = null!;

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public Guid SubmissionId { get; set; }

    private QuestionnaireSubmissionEntity? _submission;

    protected override async Task OnInitializedAsync()
    {
        await StudioLayout.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _submission = await dbContext.QuestionnaireSubmissions
            .AsNoTracking()
            .AsSplitQuery()
            .Include(x => x.Version.Questionnaire)
            .Include(x => x.Version.Fields!).ThenInclude(x => x.Field)
            .Include(x => x.FieldValues)
            .Include(x => x.User)
            .SingleOrDefaultAsync(x => x.Id == SubmissionId);
    }

    private string GetDownloadUrl(SubmissionFileData file)
    {
        return $"{ApiEndpointPaths.QuestionnaireSubmissionDownloadFile}?submissionId={SubmissionId}&fileId={file.Id}";
    }

    private async Task HandleGrantApproval()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        QuestionnaireSubmissionEntity submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .SingleAsync(x => x.Id == SubmissionId);

        submission.ApprovedAt = Clock.GetCurrentInstant();
        submission.ApproverId = (await UserAccessor.GetRequiredUserAsync(HttpContext)).Id;

        await dbContext.SaveChangesAsync();

        // Reload the page with new info
        NavigationManager.Refresh();
    }

    private async Task HandleRemoveApproval()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        QuestionnaireSubmissionEntity submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .SingleAsync(x => x.Id == SubmissionId);

        submission.ApprovedAt = null;
        submission.ApproverId = null;

        await dbContext.SaveChangesAsync();

        // Reload the page with new info
        NavigationManager.Refresh();
    }

}