@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/submissions/{submissionId:guid}"

@using System.Diagnostics
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Components.Layout
@using Namezr.Features.Questionnaires.Data
@using Namezr.Features.Questionnaires.Services
@using Namezr.Infrastructure.Data
@using NodaTime
@using Microsoft.AspNetCore.Components.Sections
@using Namezr.Features.Questionnaires.Components
@using Namezr.Client.Shared
@using Namezr.Client.Types
@using Namezr.Features.Identity.Helpers
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Eligibility.Data
@using Namezr.Features.Creators.Services
@using Namezr.Components
@using Namezr.Client.Studio.Questionnaires
@using Namezr.Client.Studio.Questionnaires.Submissions
@using Namezr.Features.Notifications.Contracts
@using Namezr.Features.Questionnaires.Mappers
@using vNext.BlazorComponents.FluentValidation
@using Namezr.Features.Questionnaires.Notifications

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IFieldValueSerializer ValueSerializer
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject IClock Clock
@inject IEligibilityService EligibilityService
@inject ISupportPlansService SupportPlansService
@inject ISubmissionAuditService AuditService
@inject INotificationDispatcher NotificationDispatcher

@if (_submission == null || _eligibilityResult is null)
{
    return;
}

<PageTitle>
    Submission |
    <StaticTruncatedText Text="@_submission.Version.Questionnaire.Title" MaxLength="25"/>
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <SubmissionsBreadcrumbs Questionnaire="_submission.Version.Questionnaire"/>

        <HxBreadcrumbItem
            Href=@(NavigationManager.Uri)
            Text=@($"#{_submission.Number}")
        />
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    Submission details
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.ButtonsSectionId">
    <div class="d-flex flex-row gap-2">
        <AddToSelectionButton
            CreatorId="CreatorId"
            QuestionnaireId="QuestionnaireId"
            SubmissionId="SubmissionId"/>

        @if (_submission.ApprovedAt is not null)
        {
            <EditForm Model="new object()" FormName="remove-approval" OnValidSubmit="HandleRemoveApproval">
                <HxSubmit
                    Text="Remove approval"
                    Color="@ThemeColor.Danger"/>
            </EditForm>
        }
        else
        {
            <EditForm Model="new object()" FormName="grant-approval" OnValidSubmit="HandleGrantApproval">
                <HxSubmit
                    Text="Approve"
                    Color="@ThemeColor.Success"/>
            </EditForm>
        }
    </div>
</SectionContent>

<div class="d-flex flex-column gap-3">
    <table class="table table-striped mb-0">
        <tr>
            <th>User</th>
            <td>
                <a href="@($"/studio/{CreatorId.NoHyphens()}/supporters/users/{_submission.User.Id.NoHyphens()}")">
                    @_submission.User.UserName
                </a>
            </td>
        </tr>

        <tr>
            <th>Submitted</th>
            <td>
                <RelativeTime Value="_submission.SubmittedAt.ToDateTimeOffset()"/>
            </td>
        </tr>

        <tr>
            <th>Questionnaire version</th>
            <td>#@_submission.Version.Number</td>
        </tr>

        <tr>
            <th>Labels</th>
            <td>
                <AppliedLabelsManageableList
                    CreatorId="CreatorId"
                    SubmissionId="SubmissionId"
                    AppliedLabels="_appliedLabels"
                    PossibleLabels="_possibleLabels"
                />
            </td>
        </tr>

        <tr>
            <th>Is approved</th>
            <td>
                <div class="d-flex justify-content-between align-items-center gap-3">
                    <YesNoBadge Value="@(_submission.ApprovedAt is not null)"/>
                </div>
            </td>
        </tr>

        @if (_submission.ApprovedAt is not null)
        {
            <tr>
                <th>Approved</th>
                <td>
                    <RelativeTime Value="_submission.ApprovedAt.Value.ToDateTimeOffset()"/>
                </td>
            </tr>

            <tr>
                <th>Approved by</th>
                <td>@(_submission.ApproverId == null ? "System" : "Staff")</td>
            </tr>
        }
    </table>

    <table class="table table-striped mb-0">
        @foreach (QuestionnaireFieldConfigurationEntity fieldConfiguration in _submission.Version.Fields!)
        {
            string? valueSerialized = _submission.FieldValues!.SingleOrDefault(x => x.FieldId == fieldConfiguration.FieldId)?.ValueSerialized;
            SubmissionValueModel value = valueSerialized is null
                ? new()
                : ValueSerializer.Deserialize(
                    fieldConfiguration.Field.Type,
                    valueSerialized
                );

            <tr>
                <th>@fieldConfiguration.Title</th>
                <td>
                    @switch (fieldConfiguration.Field.Type)
                    {
                        case QuestionnaireFieldType.Text:
                            <pre>@value.StringValue</pre>
                            break;

                        case QuestionnaireFieldType.Number:
                            @value.NumberValue
                            break;

                        case QuestionnaireFieldType.FileUpload:
                            <div class="row">
                                @foreach (SubmissionFileData file in value.FileValue ?? [])
                                {
                                    /* TODO: test responsiveness */
                                    <div class="col-md-3">
                                        <SubmittedFile
                                            SubmissionId="SubmissionId"
                                            FileData="file"
                                        />
                                    </div>
                                }
                            </div>
                            break;

                        default:
                            throw new UnreachableException();
                    }
                </td>
            </tr>
        }
    </table>

    <HxCard>
        <HeaderTemplate>
            <div class="d-flex flex-row align-items-center gap-3">
                <span>
                    Eligibility
                </span>

                @if (!_eligibilityResult.Any)
                {
                    <span class="badge bg-danger">Ineligible</span>
                }
                else
                {
                    <span class="badge bg-success">Eligible</span>
                    <span class="badge bg-primary">
                        Weight: @_eligibilityResult.Modifier
                    </span>
                }
            </div>
        </HeaderTemplate>

        <BodyTemplate>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Support plan type</th>
                    <th>Support plan</th>
                    <th>Priority group</th>
                    <th>Weight</th>
                    <th style="width: 1%; white-space: nowrap;">Eligible</th>
                </tr>
                </thead>

                <tbody>
                @foreach (
                    EligibilityOptionEntity option in
                    _submission.Version.Questionnaire.EligibilityConfiguration.Options!
                )
                {
                    EligibilityPlan? eligibilityPlan = _eligibilityPlans.GetValueOrDefault(option.PlanId);

                    <tr>
                        <td>
                            @switch (eligibilityPlan?.Type)
                            {
                                case null:
                                    <i>Unknown</i>
                                    break;

                                case EligibilityType.Virtual:
                                    <span>Virtual</span>
                                    break;

                                case EligibilityType.SupportPlan:
                                    <span>@eligibilityPlan.SupportPlan?.ServiceType</span>
                                    break;

                                default:
                                    throw new UnreachableException();
                            }
                        </td>
                        <td>
                            @switch (eligibilityPlan?.Type)
                            {
                                case null:
                                    <i>Unknown</i>
                                    break;

                                case EligibilityType.Virtual:
                                    <span>@eligibilityPlan.VirtualEligibilityType</span>
                                    break;

                                case EligibilityType.SupportPlan:
                                    <span>@eligibilityPlan.SupportPlan?.DisplayName</span>
                                    break;

                                default:
                                    throw new UnreachableException();
                            }
                        </td>
                        <td>@option.PriorityGroup</td>
                        <td>@option.PriorityModifier</td>
                        <td style="width: 1%; white-space: nowrap; text-align: right;">
                            <YesNoBadge Value="@(_eligibilityResult.EligiblePlanIds.Contains(option.PlanId))"/>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </BodyTemplate>
    </HxCard>

    <HxCard>
        <HeaderTemplate>
            Staff Attributes
        </HeaderTemplate>
        <BodyTemplate>
            <SubmissionAttributesManager SubmissionId="SubmissionId" Attributes="_submissionAttributes" />
        </BodyTemplate>
    </HxCard>

    @if (_cannedComments.Length > 0)
    {
        <HxCard>
            <HeaderTemplate>
                Quick Comments
            </HeaderTemplate>
            <BodyTemplate>
                <div class="d-flex flex-column gap-2">
                    @foreach (CannedCommentEntity cannedComment in _cannedComments)
                    {
                        <form 
                            method="post"
                            @formname=@($"apply-canned-comment-{cannedComment.Id}") 
                            @onsubmit="() => OnApplyCannedComment(cannedComment)"
                        >
                            <AntiforgeryToken/>

                            <div class="d-flex align-items-start gap-3 p-2 border rounded">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center gap-2 mb-1">
                                        <HxBadge
                                            Color="@(cannedComment.CommentType == StudioSubmissionCommentType.InternalNote ? ThemeColor.Warning : ThemeColor.Info)">
                                            @(cannedComment.CommentType == StudioSubmissionCommentType.InternalNote ? "Internal" : "Public")
                                        </HxBadge>
                                        <strong>@cannedComment.Title</strong>
                                    </div>
                                    <div class="text-muted small">
                                        <TruncatedText Text="@cannedComment.Content" MaxLength="50"/>
                                    </div>
                                </div>
                                <HxSubmit
                                    Color="ThemeColor.Primary"
                                    Size="ButtonSize.Small"
                                    Text="Apply"
                                />
                            </div>
                        </form>
                    }
                </div>
            </BodyTemplate>
        </HxCard>
    }

    <HxCard>
        <HeaderTemplate>
            Leave a comment
        </HeaderTemplate>

        <BodyTemplate>
            <EditForm Model="NewComment" FormName="new-comment" OnValidSubmit="OnValidSubmitNewComment">
                <FluentValidationValidator/>

                <HxSelect
                    TItem="StudioSubmissionCommentType"
                    TValue="StudioSubmissionCommentType"
                    Label="Type"
                    Nullable="false"
                    Data="Enum.GetValues<StudioSubmissionCommentType>()"
                    @bind-Value="@NewComment!.Type"
                    TextSelector="@(type => type.Humanize())"
                />

                <HxInputTextArea @bind-Value="NewComment.Content"/>

                <HxSubmit Color="ThemeColor.Primary" Text="Submit"/>
            </EditForm>

        </BodyTemplate>
    </HxCard>

    <HxCard BodyCssClass="gap-1">
        <HeaderTemplate>
            History
        </HeaderTemplate>

        <BodyTemplate>
            <div class="d-flex flex-column gap-3">
                @foreach (SubmissionHistoryEntryEntity entry in _submission.History!.OrderByDescending(entry => entry.OccuredAt))
                {
                    <SubmissionHistoryEntry Submission="_submission" Entry="entry"/>
                }
            </div>
        </BodyTemplate>
    </HxCard>
</div>

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; } = null!;

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public Guid SubmissionId { get; set; }

    [SupplyParameterFromForm]
    public StudioSubmissionCommentModel? NewComment { get; set; }

    private QuestionnaireSubmissionEntity? _submission;
    private EligibilityResult? _eligibilityResult;
    private Dictionary<EligibilityPlanId, EligibilityPlan> _eligibilityPlans = [];

    private List<SubmissionLabelModel> _appliedLabels = [];
    private List<SubmissionLabelModel> _possibleLabels = [];

    private CannedCommentEntity[] _cannedComments = [];
    private List<SubmissionAttributeModel> _submissionAttributes = [];

    protected override async Task OnInitializedAsync()
    {
        NewComment ??= new StudioSubmissionCommentModel();

        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .AsSplitQuery()
            .Include(x => x.Version.Questionnaire.EligibilityConfiguration)
            .ThenInclude(x => x.Options!)
            .Include(x => x.Version.Fields!).ThenInclude(x => x.Field)
            .Include(x => x.FieldValues)
            .Include(x => x.User)
            .Include(x => x.Labels)
            .Include(x => x.History!).ThenInclude(entry => entry.InstigatorUser)
            .Include(x => x.Version.Questionnaire.Creator) // Ensure Creator is loaded
            .SingleOrDefaultAsync(x => x.Id == SubmissionId);

        if (_submission == null)
        {
            throw new Exception("Not found"); // TODO: 404 if not found
        }

        if (HttpContext.Request.Method.Equals(HttpMethod.Get.Method, StringComparison.InvariantCultureIgnoreCase))
        {
            // Note: this will update _submission.History
            dbContext.SubmissionHistoryEntries.Add(AuditService.StaffView(_submission));
            await dbContext.SaveChangesAsync();
        }

        SubmissionLabelEntity[] possibleLabels = await dbContext.SubmissionLabels
            .Where(label => label.CreatorId == CreatorId)
            .ToArrayAsync();

        _appliedLabels = _submission!.Labels!.Select(SubmissionLabelMapper.ToModel).ToList();
        _possibleLabels = possibleLabels.Select(SubmissionLabelMapper.ToModel).ToList();

        // Load submission attributes
        SubmissionAttributeEntity[] submissionAttributes = await dbContext.SubmissionAttributes
            .Where(attr => attr.SubmissionId == SubmissionId)
            .OrderBy(attr => attr.Key)
            .ToArrayAsync();

        _submissionAttributes = submissionAttributes.Select(attr => new SubmissionAttributeModel
        {
            Key = attr.Key,
            Value = attr.Value
        }).ToList();

        // Load canned comments for this creator
        _cannedComments = await dbContext.CannedComments
            .Where(comment => comment.CreatorId == CreatorId && comment.IsActive)
            .OrderBy(comment => comment.CommentType)
            .ThenBy(comment => comment.Title)
            .ToArrayAsync();

        _eligibilityPlans = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                await SupportPlansService.GetSupportPlans(_submission!.Version.Questionnaire.CreatorId)
            )
            .ToDictionary(plan => plan.Id);

        _eligibilityResult = await EligibilityService.ClassifyEligibility(
            _submission!.User.Id,
            _submission.Version.Questionnaire.EligibilityConfiguration,
            UserStatusSyncEagerness.MissingStatusOnly
        );
    }

    private async Task HandleGrantApproval()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        QuestionnaireSubmissionEntity submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .SingleAsync(x => x.Id == SubmissionId);

        submission.ApprovedAt = Clock.GetCurrentInstant();
        submission.ApproverId = (await UserAccessor.GetRequiredUserAsync(HttpContext)).Id;

        dbContext.SubmissionHistoryEntries.Add(AuditService.ApprovalGrant(submission));

        await dbContext.SaveChangesAsync();

        // Dispatch notification for approval granted
        NotificationDispatcher.Dispatch(new SubmissionStaffActionUserNotificationData
        {
            CreatorId = CreatorId,
            CreatorDisplayName = _submission!.Version.Questionnaire.Creator.DisplayName,
            QuestionnaireId = QuestionnaireId,
            QuestionnaireName = _submission.Version.Questionnaire.Title,
            SubmitterId = submission.UserId,
            SubmissionId = submission.Id,
            SubmissionNumber = submission.Number,

            SubmissionPublicUrl = NavigationManager
                .ToAbsoluteUri($"/questionnaires/{QuestionnaireId.NoHyphens()}/{submission.Id.NoHyphens()}")
                .AbsoluteUri,

            Type = SubmissionStaffActionType.ApprovalGranted
        });

        // Reload the page with new info
        NavigationManager.Refresh();
    }

    private async Task HandleRemoveApproval()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        QuestionnaireSubmissionEntity submission = await dbContext.QuestionnaireSubmissions
            .AsTracking()
            .SingleAsync(x => x.Id == SubmissionId);

        submission.ApprovedAt = null;
        submission.ApproverId = null;

        dbContext.SubmissionHistoryEntries.Add(AuditService.ApprovalRemoval(submission));

        await dbContext.SaveChangesAsync();

        // Dispatch notification for approval removed
        NotificationDispatcher.Dispatch(new SubmissionStaffActionUserNotificationData
        {
            CreatorId = CreatorId,
            CreatorDisplayName = _submission!.Version.Questionnaire.Creator.DisplayName,
            QuestionnaireId = QuestionnaireId,
            QuestionnaireName = _submission.Version.Questionnaire.Title,
            SubmitterId = submission.UserId,
            SubmissionId = submission.Id,
            SubmissionNumber = submission.Number,
            SubmissionPublicUrl = NavigationManager
                .ToAbsoluteUri($"/questionnaires/{QuestionnaireId.NoHyphens()}/{submission.Id.NoHyphens()}")
                .AbsoluteUri,
            Type = SubmissionStaffActionType.ApprovalRemoved
        });

        // Reload the page with new info
        NavigationManager.Refresh();
    }

    private async Task OnValidSubmitNewComment()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        SubmissionHistoryEntryEntity historyEntry = NewComment!.Type switch
        {
            StudioSubmissionCommentType.InternalNote => new SubmissionHistoryInternalNoteEntity
            {
                Content = NewComment.Content,
                OccuredAt = Clock.GetCurrentInstant(),
                InstigatorIsStaff = true,
                InstigatorIsProgrammatic = false,
                InstigatorUserId = UserAccessor.GetRequiredUserId(HttpContext),
                SubmissionId = _submission!.Id,
            },
            StudioSubmissionCommentType.PublicComment => new SubmissionHistoryPublicCommentEntity
            {
                Content = NewComment.Content,
                OccuredAt = Clock.GetCurrentInstant(),
                InstigatorIsStaff = true,
                InstigatorIsProgrammatic = false,
                InstigatorUserId = UserAccessor.GetRequiredUserId(HttpContext),
                SubmissionId = _submission!.Id,
            },

            _ => throw new UnreachableException(),
        };

        dbContext.SubmissionHistoryEntries.Add(historyEntry);
        await dbContext.SaveChangesAsync();

        // Dispatch notification for public staff comment
        if (NewComment.Type == StudioSubmissionCommentType.PublicComment)
        {
            NotificationDispatcher.Dispatch(new SubmissionStaffActionUserNotificationData
            {
                CreatorId = CreatorId,
                CreatorDisplayName = _submission.Version.Questionnaire.Creator.DisplayName,
                QuestionnaireId = QuestionnaireId,
                QuestionnaireName = _submission.Version.Questionnaire.Title,
                SubmitterId = _submission!.UserId,
                SubmissionId = _submission.Id,
                SubmissionNumber = _submission.Number,

                SubmissionPublicUrl = NavigationManager
                    .ToAbsoluteUri($"/questionnaires/{QuestionnaireId.NoHyphens()}/{_submission.Id.NoHyphens()}")
                    .AbsoluteUri,
                Type = SubmissionStaffActionType.CommentAdded,

                CommentBody = NewComment.Content
            });
        }

        // Refresh the page to show the new comment and break "are you sure you want to submit" on reload
        NavigationManager.Refresh();
    }

    private async Task OnApplyCannedComment(CannedCommentEntity cannedComment)
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        SubmissionHistoryEntryEntity historyEntry = cannedComment.CommentType switch
        {
            StudioSubmissionCommentType.InternalNote => new SubmissionHistoryInternalNoteEntity
            {
                Content = cannedComment.Content,
                OccuredAt = Clock.GetCurrentInstant(),
                InstigatorIsStaff = true,
                InstigatorIsProgrammatic = false,
                InstigatorUserId = UserAccessor.GetRequiredUserId(HttpContext),
                SubmissionId = _submission!.Id,
            },
            StudioSubmissionCommentType.PublicComment => new SubmissionHistoryPublicCommentEntity
            {
                Content = cannedComment.Content,
                OccuredAt = Clock.GetCurrentInstant(),
                InstigatorIsStaff = true,
                InstigatorIsProgrammatic = false,
                InstigatorUserId = UserAccessor.GetRequiredUserId(HttpContext),
                SubmissionId = _submission!.Id,
            },

            _ => throw new UnreachableException(),
        };

        dbContext.SubmissionHistoryEntries.Add(historyEntry);
        await dbContext.SaveChangesAsync();

        // Dispatch notification for public staff comment
        if (cannedComment.CommentType == StudioSubmissionCommentType.PublicComment)
        {
            NotificationDispatcher.Dispatch(new SubmissionStaffActionUserNotificationData
            {
                CreatorId = CreatorId,
                CreatorDisplayName = _submission.Version.Questionnaire.Creator.DisplayName,
                QuestionnaireId = QuestionnaireId,
                QuestionnaireName = _submission.Version.Questionnaire.Title,
                SubmitterId = _submission!.UserId,
                SubmissionId = _submission.Id,
                SubmissionNumber = _submission.Number,

                SubmissionPublicUrl = NavigationManager
                    .ToAbsoluteUri($"/questionnaires/{QuestionnaireId.NoHyphens()}/{_submission.Id.NoHyphens()}")
                    .AbsoluteUri,
                Type = SubmissionStaffActionType.CommentAdded,

                CommentBody = cannedComment.Content
            });
        }

        // Refresh the page to show the new comment
        NavigationManager.Refresh();
    }

}