@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/selection/{selectionId:guid}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Components.Layout
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Namezr.Features.SelectionSeries.Data
@using Namezr.Client.Studio.Questionnaires.Selection
@using Microsoft.AspNetCore.Components.Sections
@using Namezr.Features.Questionnaires.Components
@using Namezr.Client.Shared
@using Namezr.Components

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<PageTitle>
    <StaticTruncatedText Text="@_selectionSeries?.Name" MaxLength="25"/>
    |
    <StaticTruncatedText Text="@_questionnaire?.Title" MaxLength="25"/>
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        @if (_questionnaire is not null)
        {
            <SelectionsBreadcrumbs
                Questionnaire="_questionnaire"
            />
        }

        @if (_selectionSeries is not null)
        {
            <HxBreadcrumbItem
                Href=@($"studio/{CreatorId.NoHyphens()}/questionnaires/{QuestionnaireId.NoHyphens()}/selection/{_selectionSeries.Id.NoHyphens()}")
            >
                <TruncatedText
                    Text="@_selectionSeries.Name"
                    MaxLength="30"
                />
            </HxBreadcrumbItem>
        }
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    @_selectionSeries?.Name
</SectionContent>

<NewSelectionBatchForm
    SelectionSeriesId="SelectionId"
/>

<h4>Results</h4>

<table class="table table-striped">
    <thead>
    <tr>
        <th>User</th>
        <th>Submission ID</th>
        <th></th>
    </tr>
    </thead>

    <tbody>
    @if (_selectionSeries != null)
    {
        @foreach (SelectionBatchEntity batch in _selectionSeries.Batches!.OrderByDescending(x => x.RollCompletedAt))
        {
            /* TODO: animate the rows appearing */
            <tr>
                <td colspan="3" class="text-center">
                    <strong>
                        Rolled
                        <RelativeTime Value="batch.RollCompletedAt.ToDateTimeOffset()"/>
                    </strong>
                </td>
            </tr>

            // We want the end of the batch (highest batch position) to be at the top
            @foreach (SelectionEntryEntity entry in batch.Entries!.OrderByDescending(x => x.BatchPosition))
            {
                <tr>
                    @switch (entry)
                    {
                        case SelectionEntryPickedEntity picked:
                        {
                            QuestionnaireSubmissionEntity submission = (QuestionnaireSubmissionEntity)picked.Candidate;

                            <td>@submission.User.UserName</td>
                            <td>@submission.Id</td>
                            <td>
                                <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()/submissions/@submission.Id.NoHyphens()"
                                   class="btn btn-primary">
                                    View
                                </a>
                            </td>
                            break;
                        }

                        case SelectionEntryEventEntity eventEntity:
                            <td colspan="3" class="text-center">
                                <em>@eventEntity.Kind</em>
                            </td>
                            break;
                    }
                </tr>
            }
        }
    }

    @*<tr>
        <td colspan="3" class="text-center">
            <strong>Template below</strong>
        </td>
    </tr>

    <tr>
        <td colspan="3" class="text-center">
            <em>Rolling...</em>
        </td>
    </tr>
    <tr>
        <td colspan="3" class="text-center">
            <strong>Rolled on 25 February 2023 at 11:00 AM</strong>
        </td>
    </tr>
    <tr>
        <td>john@example.com</td>
        <td>@Guid.NewGuid()</td>
        <td>
            <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()/submissions/1"
               class="btn btn-primary">
                View
            </a>
        </td>
    </tr>
    <tr>
        <td>jane@example.com</td>
        <td>@Guid.NewGuid()</td>
        <td>
            <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()/submissions/1"
               class="btn btn-primary">
                View
            </a>
        </td>
    </tr>*@
    </tbody>
</table>

<h4>User statistics</h4>

<table class="table table-striped">
    <thead>
    <tr>
        <th>User</th>
        <th>Weight</th>
        <th>Has been select in current cycle</th>
        <th>Total times selected</th>
    </tr>
    </thead>

    <tbody>
    @foreach (SelectionUserDataEntity userData in GetUserDataSorted())
    {
        <tr>
            <td>@userData.User.UserName</td>
            <td>@userData.LatestModifier</td>
            <td>
                @* 
                    TODO: display exactlyhow many times the user has been selected in the current cycle
                    if we choose to allow multiple submissions/selections per cycle
                 *@
                @(userData.SelectedCount > 0 ? "Yes" : "No")
            </td>
            <td>@userData.TotalSelectedCount</td>
        </tr>
    }
    @*<tr>
        <td>john@example.com</td>
        <td>1.5</td>
        <td>No</td>
        <td>3</td>
    </tr>*@
    </tbody>
</table>

@code {

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public Guid SelectionId { get; set; }

    private QuestionnaireEntity? _questionnaire;
    private SelectionSeriesEntity? _selectionSeries;

    [SupplyParameterFromForm]
    private NewSelectionBatchOptionsModel? NewSelectionBatchOptions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NewSelectionBatchOptions ??= new NewSelectionBatchOptionsModel();

        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _questionnaire = await dbContext.Questionnaires
            .AsNoTracking()
            .FirstOrDefaultAsync(q => q.Id == QuestionnaireId && q.CreatorId == CreatorId);

        _selectionSeries = await dbContext.SelectionSeries
            .Include(x => x.UserData!).ThenInclude(x => x.User)
            .Include(x => x.Batches!)
            .ThenInclude(x => x.Entries)
            .ThenInclude(entry => (entry as SelectionEntryPickedEntity)!.Candidate)
            .ThenInclude(candidate => (candidate as QuestionnaireSubmissionEntity)!.User)
            .AsSplitQuery()
            .SingleOrDefaultAsync(x => x.Id == SelectionId);
    }

    private IEnumerable<SelectionUserDataEntity> GetUserDataSorted()
    {
        if (_selectionSeries is null) return [];

        return _selectionSeries.UserData!.OrderBy(data => data.User.UserName);
    }

}