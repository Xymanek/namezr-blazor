@page "/studio/{creatorId:guid}/questionnaires/{id:guid}"

@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client.Types
@using Namezr.Components.Layout
@using Namezr.Features.Creators.Services
@using Namezr.Features.Eligibility.Data
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Namezr.Client
@using Namezr.Features.Questionnaires.Components
@using Namezr.Client.Shared
@using Namezr.Components
@using Namezr.Client.Studio.Questionnaires

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ISupportPlansService SupportPlansService
@inject IEligibilityService EligibilityService

<PageTitle>
    <StaticTruncatedText Text="@_questionnaire?.Title" MaxLength="25"/>
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        @if (_questionnaire is not null)
        {
            <QuestionnaireBreadcrumbs
                Questionnaire="_questionnaire"
            />
        }
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    @_questionnaire?.Title
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.ButtonsSectionId">
    <a
        href="/studio/@CreatorId.NoHyphens()/questionnaires/@Id.NoHyphens()/selection"
        class="btn btn-secondary">
        Selection
    </a>
    <a
        href="/studio/@CreatorId.NoHyphens()/questionnaires/@Id.NoHyphens()/edit"
        class="btn btn-primary">
        Edit
    </a>
</SectionContent>

@if (_questionnaire is not null)
{
    /* TODO: nice labels */
    <table class="table table-striped">
        <tr>
            <th>Approval mode</th>
            <td>@_questionnaire.ApprovalMode</td>
        </tr>

        <tr>
            <th>Submission open mode</th>
            <td>@_questionnaire.SubmissionOpenMode</td>
        </tr>
    </table>

    <h4>Eligibility</h4>

    <table class="table table-striped">
        <thead>
        <tr>
            <th>Support plan</th>
            <th>Priority group</th>
            <th>Weight</th>
        </tr>
        </thead>

        <tbody>
        @foreach (EligibilityOptionEntity option in _questionnaire.EligibilityConfiguration.Options!)
        {
            <tr>
                <td>
                    @if (EligibilityDescriptors is not null)
                    {
                        EligibilityPlan? eligibilityPlan = EligibilityDescriptors.GetValueOrDefault(option.PlanId);

                        @switch (eligibilityPlan?.Type)
                        {
                            case null:
                                <i>Unknown</i>
                                break;

                            case EligibilityType.SupportPlan:
                                <span>@eligibilityPlan.SupportPlan?.DisplayName</span>
                                break;

                            case EligibilityType.Virtual:
                                <span>@eligibilityPlan.VirtualEligibilityType</span>
                                break;

                            default:
                                throw new UnreachableException();
                        }
                    }
                </td>
                <td>@option.PriorityGroup</td>
                <td>@option.PriorityModifier</td>
            </tr>
        }
        </tbody>
    </table>

    <hr class="my-4"/>

    <QuestionnaireFieldsOverview
        Versions="QuestionnaireEntityToFormMapper.MapToOverview(_questionnaire.Versions ?? [])"
    />

    <hr class="my-4"/>

    <h4>Submissions</h4>


    <table class="table table-striped">
        <thead>
        <tr>
            <th>User</th>
            <th>Submitted</th>
            <th>Is approved</th>
            <th>Questionnaire version</th>
            <th></th>
        </tr>
        </thead>

        <tbody>
        @foreach (QuestionnaireSubmissionEntity submission in _submissions)
        {
            /* TODO: pagination */

            <tr>
                <td>
                    <a href="@($"/studio/{CreatorId.NoHyphens()}/supporters/users/{submission.User.Id.NoHyphens()}")">
                        @submission.User.UserName
                    </a>
                </td>
                <td>
                    <RelativeTime Value="submission.SubmittedAt.ToDateTimeOffset()"/>
                </td>
                <td>
                    <YesNoBadge Value="@(submission.ApprovedAt != null)"/>
                </td>
                <td>@submission.VersionId</td>
                <td>
                    <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@Id.NoHyphens()/submissions/@submission.Id.NoHyphens()"
                       class="btn btn-primary">
                        View
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    private QuestionnaireEntity? _questionnaire;
    private QuestionnaireSubmissionEntity[] _submissions = [];
    private Dictionary<EligibilityPlanId, EligibilityPlan>? EligibilityDescriptors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _questionnaire = await dbContext.Questionnaires
            .AsNoTracking()
            .AsSplitQuery()
            .Where(q => q.Id == Id && q.CreatorId == CreatorId)
            .Include(x => x.EligibilityConfiguration).ThenInclude(x => x.Options)
            .Include(x => x.Versions!).ThenInclude(x => x.Fields!).ThenInclude(x => x.Field)
            .FirstOrDefaultAsync();

        _submissions = await dbContext.QuestionnaireSubmissions
            .Include(s => s.User)
            .Where(s => s.Version.QuestionnaireId == Id)
            .ToArrayAsync();

        EligibilityDescriptors = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                // TODO: in parallel
                await SupportPlansService.GetSupportPlans(CreatorId)
            )
            .ToDictionary(plan => plan.Id);
    }

}