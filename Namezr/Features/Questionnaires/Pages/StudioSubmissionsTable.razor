@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/submissions"

@using Microsoft.AspNetCore.Authorization
@using Namezr.Components.Layout
@using Namezr.Client.Studio.Questionnaires.Submissions
@using Namezr.Components
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.EntityFrameworkCore
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Shared
@using Namezr.Client.Types
@using Namezr.Features.Creators.Services
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Questionnaires.Components
@using Namezr.Features.Questionnaires.Data
@using Namezr.Features.Questionnaires.Mappers
@using Namezr.Infrastructure.Data

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ISupportPlansService SupportPlansService
@inject IEligibilityService EligibilityService

@if (_questionnaire == null || _questionnaireConfig == null)
{
    return;
}

<PageTitle>
    Submissions |
    <StaticTruncatedText Text="@_questionnaire.Title" MaxLength="25"/>
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <QuestionnaireBreadcrumbs
            Questionnaire="_questionnaire"
        />

        @* TODO: link (+ unite with details page) *@
        <HxBreadcrumbItem
            Text="Submissions"
        />
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    Submissions
</SectionContent>

<SubmissionsTable
    EligibilityDescriptors="_eligibilityDescriptors"
    QuestionnaireConfig="_questionnaireConfig"
    PossibleLabels="_possibleLabels"
    Items="[] /* TODO */"
/>

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; } = null!;

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    private QuestionnaireEntity? _questionnaire;

    private List<EligibilityPlan> _eligibilityDescriptors = [];
    private List<SubmissionLabelModel> _possibleLabels = [];
    private QuestionnaireConfigModel? _questionnaireConfig;

    protected override async Task OnInitializedAsync()
    {
        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _questionnaire = await dbContext.Questionnaires
            .AsNoTracking()
            .AsSplitQuery()
            .Include(q => q.Versions)
            .SingleOrDefaultAsync(q => q.Id == QuestionnaireId && q.CreatorId == CreatorId);

        // TODO: handle not found

        _questionnaireConfig = _questionnaire!.Versions!
            .OrderByDescending(version => version.CreatedAt)
            .First()
            .MapToConfigModel();

        _eligibilityDescriptors = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                // TODO: in parallel
                await SupportPlansService.GetSupportPlans(CreatorId)
            )
            .ToList();

        SubmissionLabelEntity[] possibleLabels = await dbContext.SubmissionLabels
            .Where(label => label.CreatorId == CreatorId)
            .ToArrayAsync();

        _possibleLabels = possibleLabels.Select(SubmissionLabelMapper.ToModel).ToList();
    }

}