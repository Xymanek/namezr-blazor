@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/submissions"

@using Microsoft.AspNetCore.Authorization
@using Namezr.Components.Layout
@using Namezr.Client.Studio.Questionnaires.Submissions
@using Namezr.Components
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.EntityFrameworkCore
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Shared
@using Namezr.Client.Types
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Creators.Services
@using Namezr.Features.Eligibility.Mappers
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Questionnaires.Components
@using Namezr.Features.Questionnaires.Data
@using Namezr.Features.Questionnaires.Mappers
@using Namezr.Features.Questionnaires.Services
@using Namezr.Infrastructure.Data

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ISupportPlansService SupportPlansService
@inject IEligibilityService EligibilityService
@inject IFieldValueSerializer ValueSerializer

@if (_questionnaire == null || _questionnaireConfig == null)
{
    return;
}

<PageTitle>
    Submissions |
    <StaticTruncatedText Text="@_questionnaire.Title" MaxLength="25"/>
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <QuestionnaireBreadcrumbs
            Questionnaire="_questionnaire"
        />

        @* TODO: link (+ unite with details page) *@
        <HxBreadcrumbItem
            Text="Submissions"
        />
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    Submissions
</SectionContent>

<SubmissionsTable
    EligibilityDescriptors="_eligibilityDescriptors"
    QuestionnaireConfig="_questionnaireConfig"
    PossibleLabels="_possibleLabels"
    Items="_items"
/>

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; } = null!;

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    private QuestionnaireEntity? _questionnaire;

    private List<EligibilityPlan> _eligibilityDescriptors = [];
    private List<SubmissionLabelModel> _possibleLabels = [];
    private QuestionnaireConfigModel? _questionnaireConfig;
    private SubmissionTableItemModel[] _items = [];

    protected override async Task OnInitializedAsync()
    {
        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _questionnaire = await dbContext.Questionnaires
            .AsNoTracking()
            .AsSplitQuery()
            .Include(q => q.Versions)
            .Include(q => q.EligibilityConfiguration).ThenInclude(q => q.Options)
            .SingleOrDefaultAsync(q => q.Id == QuestionnaireId && q.CreatorId == CreatorId);

        // TODO: handle not found

        _questionnaireConfig = _questionnaire!.Versions!
            .OrderByDescending(version => version.CreatedAt)
            .First()
            .MapToConfigModel();

        var loadedSubmissions = await dbContext.QuestionnaireSubmissions
            .AsNoTracking()
            .Where(submission => submission.Version.QuestionnaireId == QuestionnaireId)
            .Include(submission => submission.Labels)
            .Include(submission => submission.FieldValues!).ThenInclude(value => value.Field)
            .Include(submission => submission.User)
            .Select(submission => new
            {
                submission,
                LastUpdate = submission.History!
                    .Where(entry =>
                        !(entry is SubmissionHistoryStaffViewedEntity) &&
                        !(entry is SubmissionHistoryFileDownloadedEntity)
                    )
                    .Max(entry => entry.OccuredAt)
            })
            .ToArrayAsync();

        // We might not have individual entries in the memory cache.
        // In such a case, we want to do the network IO in parallel.
        // However, there is no value in running all the mapping code in parallel; it's not intensive enough.
        _items = await Task.WhenAll(loadedSubmissions.Select(async entry =>
        {
            EligibilityResult? eligibility = EligibilityService
                .GetCachedEligibility(entry.submission.UserId, _questionnaire.EligibilityConfiguration);

            // If we don't have a cache, send the least requests possible
            eligibility ??= await EligibilityService
                .ClassifyEligibility(
                    entry.submission.UserId,
                    _questionnaire.EligibilityConfiguration,
                    UserStatusSyncEagerness.NoSyncSkipConsumerIfMissing
                );

            return new SubmissionTableItemModel
            {
                Id = entry.submission.Id,
                Number = entry.submission.Number,
                UserDisplayName = entry.submission.User.UserName!,
                Eligibility = eligibility.ToModel(),
                InitiallySubmittedAt = entry.submission.SubmittedAt.ToDateTimeOffset(),
                LastUpdateAt = entry.LastUpdate.ToDateTimeOffset(),
                IsApproved = entry.submission.ApprovedAt != null,

                Labels = entry.submission.Labels!
                    .Select(SubmissionLabelMapper.ToModel)
                    .ToList(),

                Values = entry.submission.FieldValues!
                    .Select(value => KeyValuePair.Create(
                        value.Field.Id,
                        ValueSerializer.Deserialize(value.Field.Type, value.ValueSerialized)
                    ))
                    .ToDictionary(),
            };
        }));

        _eligibilityDescriptors = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                // TODO: in parallel
                await SupportPlansService.GetSupportPlans(CreatorId)
            )
            .ToList();

        SubmissionLabelEntity[] possibleLabels = await dbContext.SubmissionLabels
            .Where(label => label.CreatorId == CreatorId)
            .ToArrayAsync();

        _possibleLabels = possibleLabels.Select(SubmissionLabelMapper.ToModel).ToList();
    }

}