@page "/studio/{creatorId:guid}/questionnaires/new"

@using Microsoft.AspNetCore.Authorization
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Client.Types
@using Namezr.Components.Layout
@using Namezr.Features.Creators.Services
@using Namezr.Features.Eligibility.Services
@using Microsoft.AspNetCore.Components.Sections
@using Namezr.Client
@using Namezr.Features.Questionnaires.Components

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject ISupportPlansService SupportPlansService
@inject IEligibilityService EligibilityService

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <QuestionnairesBreadcrumbs CreatorId="CreatorId"/>
        <HxBreadcrumbItem
            Href=@($"studio/{CreatorId.NoHyphens()}/questionnaires/new")
            Text="New"
        />
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    New questionnaire
</SectionContent>

@if (EligibilityDescriptors is not null)
{
    <QuestionnaireEditor
        CreatorId="CreatorId"
        InitialModel="InitialModel"
        EligibilityDescriptors="EligibilityDescriptors"
    />
}

@code {

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    private QuestionnaireEditModel InitialModel { get; } = new();

    private List<EligibilityPlan>? EligibilityDescriptors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        EligibilityDescriptors = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                // TODO: in parallel
                await SupportPlansService.GetSupportPlans(CreatorId)
            )
            .ToList();
    }

}