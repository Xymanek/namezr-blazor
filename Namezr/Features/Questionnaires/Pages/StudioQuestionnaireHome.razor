@page "/studio/{creatorId:guid}/questionnaires"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Components.Layout
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Microsoft.AspNetCore.Components.Sections
@using Namezr.Features.Questionnaires.Components

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <QuestionnairesBreadcrumbs CreatorId="CreatorId"/>
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    Questionnaires
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.ButtonsSectionId">
    <a
        href="/studio/@CreatorId.NoHyphens()/questionnaires/new"
        class="btn btn-success">
        Create
    </a>
</SectionContent>

@if (Questionnaires?.Any() ?? false)
{
    <ul>
        @foreach (QuestionnaireEntity questionnaire in Questionnaires)
        {
            <li>
                <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@questionnaire.Id.NoHyphens()">
                    @questionnaire.Title
                </a>
            </li>
        }
    </ul>
}
else
{
    <p>No questionnaires yet.</p>
}

@code {

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    private List<QuestionnaireEntity>? Questionnaires { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        Questionnaires = await dbContext.Questionnaires
            .Where(q => q.CreatorId == CreatorId)
            .ToListAsync();
    }

}