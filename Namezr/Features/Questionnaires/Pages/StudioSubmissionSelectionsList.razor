@page "/studio/{creatorId:guid}/questionnaires/{questionnaireId:guid}/selection"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Components.Layout
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Havit.Blazor.Components.Web.Bootstrap
@using Namezr.Features.SelectionSeries.Data
@using Microsoft.AspNetCore.Components.Forms
@using Namezr.Features.Eligibility.Data
@using vNext.BlazorComponents.FluentValidation

@attribute [Authorize]
@layout StudioLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager NavigationManager

@if (_questionnaire is not null)
{
    <div class="d-flex gap-3 align-items-center justify-content-between">
        <h3>@_questionnaire.Title</h3>
        <a
            href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()"
            class="btn btn-secondary">
            Questionnaire
        </a>
    </div>
}

<h4>New selection series</h4>

<EditForm
    Model="NewSeries"
    FormName="new-series"
    OnValidSubmit="HandleNewSeriesValidSubmit"
>
    <FluentValidationValidator/>

    <div class="grid">
        <HxInputText
            CssClass="col-9"
            Label="Name"
            Placeholder="@_newSeriesNamePlaceholder"
            @bind-Value="NewSeries!.Name"/>
        <HxSubmit
            CssClass="col-3"
            Text="Create"
            Color="ThemeColor.Success"/>
    </div>
</EditForm>

<h4>Existing selection series</h4>

<ul>
    @if (_series is not null)
    {
        @foreach (SelectionSeriesEntity series in _series)
        {
            <li>
                <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()/selection/@series.Id.NoHyphens()">
                    @series.Name
                </a>
            </li>
        }
    }
</ul>

@code {

    [CascadingParameter]
    public required StudioLayout StudioLayout { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    private SelectionSeriesEntity[]? _series;
    private QuestionnaireEntity? _questionnaire;

    private string _newSeriesNamePlaceholder = "Default";

    [SupplyParameterFromForm]
    public NewSeriesModel? NewSeries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NewSeries ??= new NewSeriesModel();

        await StudioLayout.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _questionnaire = await dbContext.Questionnaires
            .AsNoTracking()
            .FirstOrDefaultAsync(q => q.Id == QuestionnaireId && q.CreatorId == CreatorId);

        _series = await dbContext.SelectionSeries
            .Where(x => x.QuestionnaireId == QuestionnaireId)
            .ToArrayAsync();

        if (_series.Length > 0)
        {
            _newSeriesNamePlaceholder = $"Series {_series.Length + 1}";
        }
    }

    private async Task HandleNewSeriesValidSubmit()
    {
        // TODO: validate name uniqueness

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        SelectionSeriesEntity newEntity = new SelectionSeriesEntity
        {
            Name = NewSeries!.Name,

            OwnershipType = EligibilityConfigurationOwnershipType.Questionnaire,
            QuestionnaireId = QuestionnaireId,

            CompleteCyclesCount = 0,
        };
        dbContext.SelectionSeries.Add(newEntity);

        await dbContext.SaveChangesAsync();

        NavigationManager.NavigateTo(
            $"/studio/{CreatorId.NoHyphens()}/questionnaires/{QuestionnaireId.NoHyphens()}/selection/{newEntity.Id.NoHyphens()}"
        );
    }

}