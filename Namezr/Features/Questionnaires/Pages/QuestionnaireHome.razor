@page "/questionnaires/{QuestionnaireId:guid}"

@using System.Collections.Immutable
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Client.Public.Questionnaires
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Client.Types
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Creators.Services
@using Namezr.Features.Eligibility.Data
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Files
@using Namezr.Features.Files.Services
@using Namezr.Features.Identity.Data
@using Namezr.Features.Questionnaires.Services
@using Namezr.Features.Identity.Helpers
@using Namezr.Features.Creators.Data
@using Namezr.Components
@using Namezr.Features.Questionnaires.Components

@inject ApplicationDbContext DbContext
@inject ISupportPlansService SupportPlansService
@inject IEligibilityService EligibilityService
@inject IdentityUserAccessor UserAccessor
@inject IFieldValueSerializer FieldValueSerializer
@inject IFileUploadTicketHelper FileUploadTicketHelper
@inject NavigationManager NavigationManager

@if (_versionEntity is not null)
{
    <PageTitle>
        <StaticTruncatedText Text="@_versionEntity.Questionnaire.Title" MaxLength="25"/>
        <CreatorPublicTitleSuffix Creator="_versionEntity.Questionnaire.Creator"/>
    </PageTitle>

    @*<HxBreadcrumb>
        <HxBreadcrumbItem Text="Home" Href="/"/>
        <HxBreadcrumbItem Text="@_versionEntity.Questionnaire.Creator.DisplayName" Href="/"/>
        <HxBreadcrumbItem Text="Questionnaires" Href="/"/>
    </HxBreadcrumb>*@

    <div class="d-flex flex-row gap-4">
        @if (_versionEntity.Questionnaire.Creator.LogoFileId is not null)
        {
            <img
                src="@($"{ApiEndpointPaths.CreatorsLogoDownload}?creatorId={_versionEntity.Questionnaire.CreatorId}")"
                alt="Creator logo"
                style="max-width: 250px; max-height: 250px;"
            />
        }

        <div>
            <strong>@_versionEntity.Questionnaire.Creator.DisplayName</strong>
            <h3>@_versionEntity?.Questionnaire.Title</h3>
        </div>
    </div>

    <div>
        <pre>@_versionEntity?.Questionnaire.Description</pre>
    </div>

    <h3>Ways to be eligible:</h3>

    <div class="row">
        @{
            IEnumerable<IGrouping<(EligibilityType Type, Guid? SupportTargetId), EligibilityOptionEntity>> groupedOptions = _versionEntity!
                .Questionnaire
                .EligibilityConfiguration
                .Options!
                .GroupBy(option => (option.PlanId.Type, option.PlanId.SupportPlanId?.SupportTargetId))
                .OrderBy(x => x.Key.Type switch
                {
                    // Ensure that the "other"/virtual group is always last
                    EligibilityType.Virtual => 1,
                    _ => 0,
                });
        }

        @foreach (var grouping in groupedOptions)
        {
            SupportTargetEntity? supportTarget = null;

            if (grouping.Key.Type == EligibilityType.SupportPlan)
            {
                EligibilityPlan matchingEligibilityPlan = _eligibilityPlans!.Values
                    .First(x => x.SupportPlan?.Id.SupportTargetId == grouping.Key.SupportTargetId);

                supportTarget = _supportTargets
                    .GetValueOrDefault(matchingEligibilityPlan.SupportPlan!.Id.SupportTargetId);
            }

            <div class="col">
                <HxCard>
                    <HeaderTemplate>
                        @if (supportTarget is not null)
                        {
                            @if (supportTarget.HomeUrl is not null)
                            {
                                <a
                                    href="@supportTarget.HomeUrl"
                                    class="text-decoration-none"
                                    target="_blank"
                                >
                                    <SupportTargetEligibilityHeader SupportTarget="supportTarget"/>
                                </a>
                            }
                            else
                            {
                                <SupportTargetEligibilityHeader SupportTarget="supportTarget"/>
                            }
                        }
                        else
                        {
                            <span>Other</span>
                        }
                    </HeaderTemplate>

                    <BodyTemplate>
                        <ul>
                            @foreach (EligibilityOptionEntity option in grouping)
                            {
                                <li>
                                    @if (option.PlanId.Type == EligibilityType.SupportPlan)
                                    {
                                        EligibilityPlan plan = _eligibilityPlans![option.PlanId];

                                        <span>
                                            @plan.SupportPlan!.DisplayName
                                        </span>
                                    }
                                    else
                                    {
                                        <span>@option.PlanId.VirtualEligibilityType</span>
                                    }

                                    @if (_eligiblePlanIds.Contains(option.PlanId))
                                    {
                                        <span class="ms-2 badge bg-success">Eligible</span>
                                    }
                                </li>
                            }
                        </ul>

                        @if (supportTarget is not null)
                        {
                            @if (_disabledReason == DisabledReason.NotLoggedIn)
                            {
                                <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
                                    <div>
                                        <AntiforgeryToken/>
                                        <input type="hidden" name="ReturnUrl" value="@NavigationManager.Uri"/>
                                        
                                        <button
                                            type="submit"
                                            class="btn btn-primary"
                                            name="provider"
                                            value="@SupportServiceToAuthMap.ServiceTypeToAuthScheme(supportTarget.ServiceType)"
                                        >
                                            Login to use your status
                                        </button>
                                    </div>
                                </form>
                            }
                            else if (grouping.All(option => !_eligiblePlanIds.Contains(option.PlanId)))
                            {
                                // User is logged in but is not eligible for any of the options

                                if (
                                    !SupportServiceToAuthMap.HasSupportServiceLink(
                                        supportTarget.ServiceType, userLoginSchemes
                                    )
                                )
                                {
                                    // User is logged in but has not linked account with this service

                                    /* TODO: direct redirect to challenge */
                                    <a
                                        href="/Account/Manage/ExternalLogins" class="btn btn-primary"
                                    >
                                        Link account to use your status
                                    </a>
                                }
                                else if (supportTarget.JoinUrl is not null || supportTarget.HomeUrl is not null)
                                {
                                    // User is logged in and has linked account with this service.
                                    // Present the option to join the support target

                                    <a
                                        href="@(supportTarget.JoinUrl ?? supportTarget.HomeUrl)"
                                        target="_blank"
                                        class="btn btn-primary"
                                    >
                                        Join to become eligible
                                    </a>
                                }
                            }
                        }
                    </BodyTemplate>
                </HxCard>
            </div>
        }
    </div>

    <div class="mb-2"></div>

    @switch (_disabledReason)
    {
        case null:
            break;

        case DisabledReason.SubmissionsClosed:
            <HxAlert Color="ThemeColor.Secondary">
                Submissions are currently closed.
            </HxAlert>
            break;

        case DisabledReason.NotLoggedIn:
            <HxAlert Color="ThemeColor.Warning">
                Please log in to submit a response.
            </HxAlert>
            break;

        case DisabledReason.NotEligible:
            /* TODO: links to auth with eligibility options */
            <HxAlert Color="ThemeColor.Warning">
                You are currently not eligible.
            </HxAlert>
            break;

        case DisabledReason.AlreadyApproved:
            <HxAlert Color="ThemeColor.Secondary">
                Your submission has already been approved and cannot be edited.
            </HxAlert>
            break;

        default:
            throw new UnreachableException();
    }

    @if (ConfigModel is not null)
    {
        <SubmissionEditor
            Config="ConfigModel"
            SubmissionId="SubmissionId"
            InitialValues="_initialValues"
            FileUploadTickets="_fileUploadTickets"
            AllDisabled="_disabledReason.HasValue"
            QuestionnaireVersionId="QuestionnaireVersionId!.Value"
        />
    }
}

@code {
    private QuestionnaireVersionEntity? _versionEntity;

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    private QuestionnaireConfigModel? ConfigModel { get; set; }
    private Guid? QuestionnaireVersionId { get; set; }
    private Guid? SubmissionId { get; set; }

    private IReadOnlyDictionary<EligibilityPlanId, EligibilityPlan>? _eligibilityPlans;
    private ImmutableHashSet<EligibilityPlanId> _eligiblePlanIds = ImmutableHashSet<EligibilityPlanId>.Empty;

    private IReadOnlyDictionary<Guid, SupportTargetEntity> _supportTargets
        = new Dictionary<Guid, SupportTargetEntity>();

    private Dictionary<string, SubmissionValueModel>? _initialValues;
    private Dictionary<Guid, string> _fileUploadTickets = new();

    private DisabledReason? _disabledReason;
    private string[] userLoginSchemes = [];

    protected override async Task OnInitializedAsync()
    {
        _versionEntity = await DbContext.QuestionnaireVersions
            .AsSplitQuery()
            .AsNoTracking()
            .Include(x => x.Questionnaire.EligibilityConfiguration).ThenInclude(x => x.Options)
            .Include(x => x.Questionnaire.Creator.SupportTargets)
            .Include(x => x.Fields!).ThenInclude(x => x.Field)
            .OrderByDescending(x => x.CreatedAt)
            .FirstOrDefaultAsync(q => q.Questionnaire.Id == QuestionnaireId);

        // TODO: 404 if not found

        _supportTargets = _versionEntity!.Questionnaire.Creator.SupportTargets!
            .ToDictionary(x => x.Id);

        if (_versionEntity!.Questionnaire.SubmissionOpenMode == QuestionnaireSubmissionOpenMode.Closed)
        {
            _disabledReason = DisabledReason.SubmissionsClosed;
        }

        ConfigModel = _versionEntity?.MapToConfigModel();
        QuestionnaireVersionId = _versionEntity?.Id;

        _eligibilityPlans = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                // TODO: in parallel
                await SupportPlansService.GetSupportPlans(_versionEntity!.Questionnaire.CreatorId)
            )
            .ToDictionary(plan => plan.Id);

        ApplicationUser? user = await UserAccessor.GetUserAsync(HttpContext);

        if (user is null)
        {
            _disabledReason ??= DisabledReason.NotLoggedIn;
        }
        else
        {
            userLoginSchemes = await DbContext.UserLogins
                .Where(x => x.UserId == user.Id)
                .Select(x => x.LoginProvider)
                .Distinct()
                .ToArrayAsync(HttpContext.RequestAborted);

            EligibilityResult eligibilityResult = await EligibilityService.ClassifyEligibility(
                user.Id,
                _versionEntity.Questionnaire.EligibilityConfiguration,
                UserStatusSyncEagerness.Default
            );

            if (!eligibilityResult.Any)
            {
                _disabledReason ??= DisabledReason.NotEligible;
            }

            _eligiblePlanIds = eligibilityResult.EligiblePlanIds;

            QuestionnaireSubmissionEntity? submission = await DbContext.QuestionnaireSubmissions
                .Include(x => x.FieldValues)
                .FirstOrDefaultAsync(x => x.UserId == user.Id && x.Version.QuestionnaireId == QuestionnaireId);

            if (submission is null)
            {
                if (_versionEntity.Questionnaire.SubmissionOpenMode == QuestionnaireSubmissionOpenMode.EditExistingOnly)
                {
                    _disabledReason ??= DisabledReason.SubmissionsClosed;
                }
            }
            else
            {
                if (
                    submission.ApprovedAt is not null &&
                    _versionEntity.Questionnaire.ApprovalMode == QuestionnaireApprovalMode.RequireApprovalProhibitEditingApproved
                )
                {
                    _disabledReason ??= DisabledReason.AlreadyApproved;
                }

                _initialValues = new Dictionary<string, SubmissionValueModel>();
                SubmissionId = submission.Id;

                foreach (QuestionnaireFieldValueEntity fieldValue in submission.FieldValues!)
                {
                    QuestionnaireFieldType? fieldType = _versionEntity.Fields!
                        .SingleOrDefault(fieldConfig => fieldConfig.FieldId == fieldValue.FieldId)
                        ?.Field.Type;

                    if (fieldType is null) continue;

                    _initialValues.Add(
                        fieldValue.FieldId.ToString(),
                        FieldValueSerializer.Deserialize(fieldType.Value, fieldValue.ValueSerialized)
                    );
                }
            }
        }

        if (_disabledReason == null)
        {
            CreateFileUploadTickets();
        }
    }

    private void CreateFileUploadTickets()
    {
        _fileUploadTickets = ConfigModel!.Fields
            .Where(field => field.Type == QuestionnaireFieldType.FileUpload)
            .ToDictionary(
                field => field.Id,
                field => FileUploadTicketHelper.CreateForCurrentUser(new NewFileRestrictions
                {
                    MinBytes = field.FileUploadOptions?.MinItemSizeBytes,
                    MaxBytes = field.FileUploadOptions?.MaxItemSizeBytes,
                    AllowedExtensions = field.FileUploadOptions?.AllowedExtensions.ToImmutableList(),
                })
            );
    }

    private enum DisabledReason
    {
        SubmissionsClosed,
        NotLoggedIn,
        NotEligible,
        AlreadyApproved,
    }

}