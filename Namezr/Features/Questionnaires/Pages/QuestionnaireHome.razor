@page "/questionnaires/{QuestionnaireId:guid}"

@using System.Collections.Immutable
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Client.Public.Questionnaires
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Features.Files
@using Namezr.Features.Files.Services
@using Namezr.Features.Identity.Data
@using Namezr.Features.Questionnaires.Services
@using Namezr.Features.Identity.Helpers
@using Namezr.Components
@using Namezr.Features.Eligibility.Components
@using Namezr.Features.PublicCommon.Components
@using Namezr.Client.Shared
@using Namezr.Features.Notifications.Contracts
@using Namezr.Features.Questionnaires.Mappers
@using Namezr.Features.Questionnaires.Notifications
@using NodaTime
@using vNext.BlazorComponents.FluentValidation
@using Namezr.Features.Questionnaires.Models
@using Namezr.Features.Eligibility.Services

@inject IQuestionnaireSubmissionContextService QuestionnaireSubmissionContextService
@inject IFieldValueSerializer FieldValueSerializer
@inject IFileUploadTicketHelper FileUploadTicketHelper
@inject IClock Clock
@inject NavigationManager NavigationManager
@inject INotificationDispatcher NotificationDispatcher
@inject IdentityUserAccessor UserAccessor
@inject ApplicationDbContext DbContext

@if (_versionEntity is not null)
{
    <PageTitle>
        <StaticTruncatedText Text="@_versionEntity.Questionnaire.Title" MaxLength="25"/>
        <CreatorPublicTitleSuffix Creator="_versionEntity.Questionnaire.Creator"/>
    </PageTitle>

    /* TODO */
    @*<HxBreadcrumb>
        <HxBreadcrumbItem Text="Home" Href="/"/>
        <HxBreadcrumbItem Text="@_versionEntity.Questionnaire.Creator.DisplayName" Href="/"/>
        <HxBreadcrumbItem Text="Questionnaires" Href="/"/>
    </HxBreadcrumb>*@

    <ActivityCreatorHeader
        Creator="_versionEntity.Questionnaire.Creator"
        ActivityTitle="@_versionEntity.Questionnaire.Title"
    />

    <div>
        <pre>@_versionEntity?.Questionnaire.Description</pre>
    </div>

    <h3>Ways to be eligible:</h3>

    <PublicEligibilityPresenter
        CreatorId="@_versionEntity!.Questionnaire.CreatorId"
        Configuration="_versionEntity!.Questionnaire.EligibilityConfiguration"
        EligibilityResult="_eligibilityResult ?? EligibilityResult.None"
    />

    <div class="mb-2"></div>

    @switch (_disabledReason)
    {
        case null:
            break;

        case SubmissionDisabledReason.SubmissionsClosed:
            <HxAlert Color="ThemeColor.Secondary">
                Submissions are currently closed.
            </HxAlert>
            break;

        case SubmissionDisabledReason.NotLoggedIn:
            <HxAlert Color="ThemeColor.Warning">
                Please log in to submit a response.
            </HxAlert>
            break;

        case SubmissionDisabledReason.NotEligible:
            <HxAlert Color="ThemeColor.Warning">
                You are currently not eligible.
            </HxAlert>
            break;

        case SubmissionDisabledReason.AlreadyApproved:
            <HxAlert Color="ThemeColor.Secondary">
                Your submission has already been approved and cannot be edited.
            </HxAlert>
            break;

        case SubmissionDisabledReason.SubmissionLimitReached:
            <HxAlert Color="ThemeColor.Warning">
                You have reached the maximum number of submissions allowed for this questionnaire.
            </HxAlert>
            break;

        default:
            throw new UnreachableException();
    }

    @if (ConfigModel is not null)
    {
        <SubmissionManager
            Submissions="_submissionSummaries"
            MaxSubmissions="_eligibilityResult?.MaxSubmissionsPerUser ?? 1"
            SelectedSubmissionId="_selectedSubmissionId"
        />
    }
}

@if (_existingSubmission is { ApprovedAt: not null } || SubmissionLabels is { Length: > 0 })
{
    <HxCard>
        <BodyTemplate>
            <div class="d-flex flex-wrap gap-2">
                @if (_existingSubmission.ApprovedAt != null)
                {
                    <HxBadge Color="ThemeColor.Success">
                        Approved
                    </HxBadge>
                }

                @foreach (SubmissionLabelEntity label in SubmissionLabels)
                {
                    <SubmissionLabelPresenter Label="label.ToModel()"/>
                }
            </div>
        </BodyTemplate>
    </HxCard>
}

@if (_existingSubmission is not null)
{
    <HxCard>
        <BodyTemplate>
            <EditForm Model="NewComment" FormName="new-comment" OnValidSubmit="OnValidSubmitNewComment">
                <FluentValidationValidator/>

                <HxInputTextArea @bind-Value="NewComment.Content"/>
                <HxSubmit Color="ThemeColor.Primary" Text="Post comment"/>
            </EditForm>
        </BodyTemplate>
    </HxCard>
}

@foreach (SubmissionHistoryPublicCommentEntity comment in SubmissionComments)
{
    <HxCard>
        <HeaderTemplate>
            <div class="d-flex justify-content-between align-items-center gap-2">
                @if (comment.InstigatorIsStaff)
                {
                    <span>Staff comment</span>
                }
                else
                {
                    <span>Your comment</span>
                }

                <div>
                    <RelativeTime Value="comment.OccuredAt.ToDateTimeOffset()"/>
                </div>
            </div>
        </HeaderTemplate>
        <BodyTemplate>
            <pre>@comment.Content</pre>
        </BodyTemplate>
    </HxCard>
}

@code {
    private QuestionnaireVersionEntity? _versionEntity;

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    private QuestionnaireConfigModel? ConfigModel { get; set; }
    private Guid? QuestionnaireVersionId { get; set; }

    private SubmissionHistoryPublicCommentEntity[] SubmissionComments { get; set; } = [];
    private SubmissionLabelEntity[] SubmissionLabels { get; set; } = [];

    [SupplyParameterFromForm]
    private SubmissionCreateSubmitterCommentModel NewComment { get; set; } = new();

    private EligibilityResult? _eligibilityResult;

    private Dictionary<Guid, string> _fileUploadTickets = new();

    private SubmissionDisabledReason? _disabledReason;
    private QuestionnaireSubmissionEntity? _existingSubmission;

    // Multiple submissions support
    private List<QuestionnaireSubmissionSummaryModel> _submissionSummaries = new();
    private Dictionary<Guid, Dictionary<string, SubmissionValueModel>> _submissionFieldValues = new();
    private QuestionnaireSubmissionContext? _context;
    private Guid? _selectedSubmissionId;

    protected override async Task OnInitializedAsync()
    {
        // Stage 1: Retrieve the latest questionnaire version
        _versionEntity = await QuestionnaireSubmissionContextService.GetLatestQuestionnaireVersionAsync(QuestionnaireId, CancellationToken.None);

        if (_versionEntity is null)
        {
            // TODO: 404
            throw new Exception($"Questionnaire with ID {QuestionnaireId} not found.");
        }

        // Stage 2: Retrieve the user
        ApplicationUser? user = await UserAccessor.GetUserAsync(HttpContext);

        // Stage 3: Retrieve the submission context (multiple submissions)
        _context = await QuestionnaireSubmissionContextService.GetSubmissionContextAsync(_versionEntity, user, SubmissionMode.Automatic, CancellationToken.None);

        _existingSubmission = _context.ExistingSubmissions.FirstOrDefault();
        _eligibilityResult = _context.EligibilityResult;
        _disabledReason = _context.DisabledReason;

        ConfigModel = _versionEntity.MapToConfigModel();
        QuestionnaireVersionId = _versionEntity?.Id;

        // Prepare summaries and field values for all submissions
        _submissionSummaries = _context.ExistingSubmissions
            .Select(s => new QuestionnaireSubmissionSummaryModel
            {
                Id = s.Id,
                Number = s.Number,
                SubmittedAt = s.SubmittedAt.ToDateTimeOffset(),
                ApprovedAt = s.ApprovedAt?.ToDateTimeOffset(),
            })
            .ToList();

        _submissionFieldValues = new Dictionary<Guid, Dictionary<string, SubmissionValueModel>>();
        foreach (var submission in _context.ExistingSubmissions)
        {
            var fieldValues = new Dictionary<string, SubmissionValueModel>();
            foreach (var fieldValue in submission.FieldValues ?? Enumerable.Empty<QuestionnaireFieldValueEntity>())
            {
                var fieldType = _versionEntity!.Fields!
                    .SingleOrDefault(fieldConfig => fieldConfig.FieldId == fieldValue.FieldId)
                    ?.Field.Type;

                if (fieldType is null) continue;

                fieldValues[fieldValue.FieldId.ToString()] =
                    FieldValueSerializer.Deserialize(fieldType.Value, fieldValue.ValueSerialized);
            }
            _submissionFieldValues[submission.Id] = fieldValues;
        }

        // Default to most recent submission
        _selectedSubmissionId = _submissionSummaries
            .OrderByDescending(s => s.SubmittedAt)
            .FirstOrDefault()?.Id;

        if (_disabledReason == null)
        {
            CreateFileUploadTickets();
        }
    }

    private async Task LoadSubmissionHistory()
    {
        if (_existingSubmission is null)
        {
            return;
        }

        SubmissionComments = await DbContext.SubmissionHistoryEntries
            .OfType<SubmissionHistoryPublicCommentEntity>()
            .Where(entry => entry.SubmissionId == _existingSubmission.Id)
            .OrderByDescending(comment => comment.OccuredAt)
            .ToArrayAsync();

        SubmissionLabels = await DbContext.SubmissionLabels
            .Where(label => 
                label.IsSubmitterVisible &&
                label.Submissions!.Any(submission => submission.Id == _existingSubmission.Id)
            )
            .ToArrayAsync();
    }

    private void CreateFileUploadTickets()
    {
        _fileUploadTickets = ConfigModel!.Fields
            .Where(field => field.Type == QuestionnaireFieldType.FileUpload)
            .ToDictionary(
                field => field.Id,
                field => FileUploadTicketHelper.CreateForCurrentUser(new NewFileRestrictions
                {
                    MinBytes = field.FileUploadOptions?.MinItemSizeBytes,
                    MaxBytes = field.FileUploadOptions?.MaxItemSizeBytes,
                    AllowedExtensions = field.FileUploadOptions?.AllowedExtensions.ToImmutableList(),
                })
            );
    }

    private async Task OnValidSubmitNewComment()
    {
        ApplicationUser submitter = await UserAccessor.GetRequiredUserAsync(HttpContext);
        Guid submitterId = submitter.Id;

        SubmissionHistoryPublicCommentEntity comment = new()
        {
            SubmissionId = _existingSubmission!.Id,
            OccuredAt = Clock.GetCurrentInstant(),

            InstigatorUserId = submitterId,
            InstigatorIsStaff = false,
            InstigatorIsProgrammatic = false,

            Content = NewComment.Content,
        };

        DbContext.SubmissionHistoryEntries.Add(comment);
        await DbContext.SaveChangesAsync();

        NotificationDispatcher.Dispatch(
            new SubmitterLeftCommentNotificationData
            {
                CreatorId = _versionEntity!.Questionnaire.CreatorId,
                CreatorDisplayName = _versionEntity!.Questionnaire.Creator.DisplayName,

                QuestionnaireId = _versionEntity!.Questionnaire.Id,
                QuestionnaireName = _versionEntity!.Questionnaire.Title,

                SubmitterId = submitterId,
                SubmitterName = submitter.UserName ?? string.Empty,

                SubmissionId = _existingSubmission.Id,
                SubmissionNumber = _existingSubmission.Number,

                SubmissionStudioUrl = NavigationManager
                    .ToAbsoluteUri(
                        $"studio/{_versionEntity.Questionnaire.CreatorId.NoHyphens()}/questionnaires/{QuestionnaireId.NoHyphens()}/submissions/{_existingSubmission.Id.NoHyphens()}"
                    )
                    .AbsoluteUri,

                CommentBody = NewComment.Content,
            }
            .ToNotification()
        );

        NavigationManager.Refresh();
    }

}