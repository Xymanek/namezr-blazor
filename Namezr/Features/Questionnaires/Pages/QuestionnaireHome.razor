@page "/questionnaires/{QuestionnaireId:guid}"

@using System.Collections.Immutable
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore
@using Namezr.Client
@using Namezr.Client.Public.Questionnaires
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Files
@using Namezr.Features.Files.Services
@using Namezr.Features.Identity.Data
@using Namezr.Features.Questionnaires.Services
@using Namezr.Features.Identity.Helpers
@using Namezr.Components
@using Namezr.Features.Eligibility.Components
@using Namezr.Features.PublicCommon.Components
@using Namezr.Client.Shared
@using Namezr.Features.Notifications.Contracts
@using Namezr.Features.Questionnaires.Mappers
@using Namezr.Features.Questionnaires.Notifications
@using NodaTime
@using vNext.BlazorComponents.FluentValidation

@inject ApplicationDbContext DbContext
@inject IEligibilityService EligibilityService
@inject IdentityUserAccessor UserAccessor
@inject IFieldValueSerializer FieldValueSerializer
@inject IFileUploadTicketHelper FileUploadTicketHelper
@inject IClock Clock
@inject NavigationManager NavigationManager
@inject INotificationDispatcher NotificationDispatcher

@if (_versionEntity is not null)
{
    <PageTitle>
        <StaticTruncatedText Text="@_versionEntity.Questionnaire.Title" MaxLength="25"/>
        <CreatorPublicTitleSuffix Creator="_versionEntity.Questionnaire.Creator"/>
    </PageTitle>

    /* TODO */
    @*<HxBreadcrumb>
        <HxBreadcrumbItem Text="Home" Href="/"/>
        <HxBreadcrumbItem Text="@_versionEntity.Questionnaire.Creator.DisplayName" Href="/"/>
        <HxBreadcrumbItem Text="Questionnaires" Href="/"/>
    </HxBreadcrumb>*@

    <ActivityCreatorHeader
        Creator="_versionEntity.Questionnaire.Creator"
        ActivityTitle="@_versionEntity.Questionnaire.Title"
    />

    <div>
        <pre>@_versionEntity?.Questionnaire.Description</pre>
    </div>

    <h3>Ways to be eligible:</h3>

    <PublicEligibilityPresenter
        CreatorId="@_versionEntity!.Questionnaire.CreatorId"
        Configuration="_versionEntity!.Questionnaire.EligibilityConfiguration"
        EligibilityResult="_eligibilityResult ?? EligibilityResult.None"
    />

    <div class="mb-2"></div>

    @switch (_disabledReason)
    {
        case null:
            break;

        case DisabledReason.SubmissionsClosed:
            <HxAlert Color="ThemeColor.Secondary">
                Submissions are currently closed.
            </HxAlert>
            break;

        case DisabledReason.NotLoggedIn:
            <HxAlert Color="ThemeColor.Warning">
                Please log in to submit a response.
            </HxAlert>
            break;

        case DisabledReason.NotEligible:
            <HxAlert Color="ThemeColor.Warning">
                You are currently not eligible.
            </HxAlert>
            break;

        case DisabledReason.AlreadyApproved:
            <HxAlert Color="ThemeColor.Secondary">
                Your submission has already been approved and cannot be edited.
            </HxAlert>
            break;

        default:
            throw new UnreachableException();
    }

    @if (ConfigModel is not null)
    {
        <SubmissionEditor
            Config="ConfigModel"
            SubmissionId="_existingSubmission?.Id"
            InitialValues="_initialValues"
            FileUploadTickets="_fileUploadTickets"
            AllDisabled="_disabledReason.HasValue"
            QuestionnaireVersionId="QuestionnaireVersionId!.Value"
        />
    }
}

@* Assumes _existingSubmission.Labels were filtered for submitter-visibile only *@
@if (_existingSubmission is { ApprovedAt: not null } or { Labels.Count: > 0 })
{
    <HxCard>
        <BodyTemplate>
            <div class="d-flex flex-wrap gap-2">
                @if (_existingSubmission.ApprovedAt != null)
                {
                    <HxBadge Color="ThemeColor.Success">
                        Approved
                    </HxBadge>
                }

                @foreach (SubmissionLabelEntity label in _existingSubmission.Labels!)
                {
                    <SubmissionLabelPresenter Label="label.ToModel()"/>
                }
            </div>
        </BodyTemplate>
    </HxCard>
}

@if (_existingSubmission is not null)
{
    <HxCard>
        <BodyTemplate>
            <EditForm Model="NewComment" FormName="new-comment" OnValidSubmit="OnValidSubmitNewComment">
                <FluentValidationValidator/>

                <HxInputTextArea @bind-Value="NewComment.Content"/>
                <HxSubmit Color="ThemeColor.Primary" Text="Post comment"/>
            </EditForm>
        </BodyTemplate>
    </HxCard>
}

@foreach (SubmissionHistoryPublicCommentEntity comment in SubmissionComments)
{
    <HxCard>
        <HeaderTemplate>
            <div class="d-flex justify-content-between align-items-center gap-2">
                @if (comment.InstigatorIsStaff)
                {
                    <span>Staff comment</span>
                }
                else
                {
                    <span>Your comment</span>
                }

                <div>
                    <RelativeTime Value="comment.OccuredAt.ToDateTimeOffset()"/>
                </div>
            </div>
        </HeaderTemplate>
        <BodyTemplate>
            <pre>@comment.Content</pre>
        </BodyTemplate>
    </HxCard>
}

@code {
    private QuestionnaireVersionEntity? _versionEntity;

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    private QuestionnaireConfigModel? ConfigModel { get; set; }
    private Guid? QuestionnaireVersionId { get; set; }

    private SubmissionHistoryPublicCommentEntity[] SubmissionComments { get; set; } = [];

    [SupplyParameterFromForm]
    private SubmissionCreateSubmitterCommentModel NewComment { get; set; } = new();

    private EligibilityResult? _eligibilityResult;

    private Dictionary<string, SubmissionValueModel>? _initialValues;
    private Dictionary<Guid, string> _fileUploadTickets = new();

    private DisabledReason? _disabledReason;
    private QuestionnaireSubmissionEntity? _existingSubmission;

    protected override async Task OnInitializedAsync()
    {
        _versionEntity = await DbContext.QuestionnaireVersions
            .AsSplitQuery()
            .AsNoTracking()
            .Include(x => x.Questionnaire.EligibilityConfiguration).ThenInclude(x => x.Options)
            .Include(x => x.Questionnaire.Creator.SupportTargets)
            .Include(x => x.Fields!).ThenInclude(x => x.Field)
            .OrderByDescending(x => x.CreatedAt)
            .FirstOrDefaultAsync(q => q.Questionnaire.Id == QuestionnaireId);

        if (_versionEntity is null)
        {
            // TODO: 404
            throw new Exception($"Questionnaire with ID {QuestionnaireId} not found.");
        }

        if (_versionEntity!.Questionnaire.SubmissionOpenMode == QuestionnaireSubmissionOpenMode.Closed)
        {
            _disabledReason = DisabledReason.SubmissionsClosed;
        }

        ConfigModel = _versionEntity?.MapToConfigModel();
        QuestionnaireVersionId = _versionEntity?.Id;

        ApplicationUser? user = await UserAccessor.GetUserAsync(HttpContext);

        if (user is null)
        {
            _disabledReason ??= DisabledReason.NotLoggedIn;
        }
        else
        {
            _eligibilityResult = await EligibilityService.ClassifyEligibility(
                user.Id,
                _versionEntity!.Questionnaire.EligibilityConfiguration,
                UserStatusSyncEagerness.Default
            );

            if (!_eligibilityResult.Any)
            {
                _disabledReason ??= DisabledReason.NotEligible;
            }

            _existingSubmission = await DbContext.QuestionnaireSubmissions
                .AsSplitQuery()
                .Include(x => x.FieldValues)
                // If these filters are ever adjusted, other code will need to change
                .Include(x => x.History!.Where(entry => entry is SubmissionHistoryPublicCommentEntity))
                .Include(x => x.Labels!.Where(label => label.IsSubmitterVisible))
                .FirstOrDefaultAsync(x => x.UserId == user.Id && x.Version.QuestionnaireId == QuestionnaireId);

            if (_existingSubmission is null)
            {
                if (_versionEntity.Questionnaire.SubmissionOpenMode == QuestionnaireSubmissionOpenMode.EditExistingOnly)
                {
                    _disabledReason ??= DisabledReason.SubmissionsClosed;
                }
            }
            else
            {
                if (
                    _existingSubmission.ApprovedAt is not null &&
                    _versionEntity.Questionnaire.ApprovalMode == QuestionnaireApprovalMode.RequireApprovalProhibitEditingApproved
                )
                {
                    _disabledReason ??= DisabledReason.AlreadyApproved;
                }

                _initialValues = new Dictionary<string, SubmissionValueModel>();
                SubmissionComments = _existingSubmission.History!
                    .Cast<SubmissionHistoryPublicCommentEntity>()
                    .OrderByDescending(comment => comment.OccuredAt)
                    .ToArray();


                foreach (QuestionnaireFieldValueEntity fieldValue in _existingSubmission.FieldValues!)
                {
                    QuestionnaireFieldType? fieldType = _versionEntity.Fields!
                        .SingleOrDefault(fieldConfig => fieldConfig.FieldId == fieldValue.FieldId)
                        ?.Field.Type;

                    if (fieldType is null) continue;

                    _initialValues.Add(
                        fieldValue.FieldId.ToString(),
                        FieldValueSerializer.Deserialize(fieldType.Value, fieldValue.ValueSerialized)
                    );
                }
            }
        }

        if (_disabledReason == null)
        {
            CreateFileUploadTickets();
        }
    }

    private void CreateFileUploadTickets()
    {
        _fileUploadTickets = ConfigModel!.Fields
            .Where(field => field.Type == QuestionnaireFieldType.FileUpload)
            .ToDictionary(
                field => field.Id,
                field => FileUploadTicketHelper.CreateForCurrentUser(new NewFileRestrictions
                {
                    MinBytes = field.FileUploadOptions?.MinItemSizeBytes,
                    MaxBytes = field.FileUploadOptions?.MaxItemSizeBytes,
                    AllowedExtensions = field.FileUploadOptions?.AllowedExtensions.ToImmutableList(),
                })
            );
    }

    private enum DisabledReason
    {
        SubmissionsClosed,
        NotLoggedIn,
        NotEligible,
        AlreadyApproved,
    }

    private async Task OnValidSubmitNewComment()
    {
        ApplicationUser submitter = await UserAccessor.GetRequiredUserAsync(HttpContext);
        Guid submitterId = submitter.Id;

        SubmissionHistoryPublicCommentEntity comment = new()
        {
            SubmissionId = _existingSubmission!.Id,
            OccuredAt = Clock.GetCurrentInstant(),

            InstigatorUserId = submitterId,
            InstigatorIsStaff = false,
            InstigatorIsProgrammatic = false,

            Content = NewComment.Content,
        };

        DbContext.SubmissionHistoryEntries.Add(comment);
        await DbContext.SaveChangesAsync();

        NotificationDispatcher.Dispatch(
            new SubmitterLeftCommentNotificationData
                {
                    CreatorId = _existingSubmission.Version.Questionnaire.CreatorId,
                    CreatorDisplayName = _existingSubmission.Version.Questionnaire.Creator.DisplayName,

                    QuestionnaireId = _existingSubmission.Version.Questionnaire.Id,
                    QuestionnaireName = _existingSubmission.Version.Questionnaire.Title,

                    SubmitterId = submitterId,
                    SubmitterName = submitter.UserName ?? string.Empty,

                    SubmissionId = _existingSubmission.Id,
                    SubmissionNumber = _existingSubmission.Number,

                    // TODO: update once we support multiple submissions per questionnaire
                    SubmissionUrl = NavigationManager
                        .ToAbsoluteUri($"/questionnaires/{QuestionnaireId.NoHyphens()}")
                        .AbsoluteUri,

                    CommentBody = NewComment.Content,
                }
                .ToNotification()
        );

        NavigationManager.Refresh();
    }

}