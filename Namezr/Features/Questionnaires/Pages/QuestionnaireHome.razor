@page "/questionnaires/{QuestionnaireId:guid}"

@using System.Collections.Immutable
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Client.Public.Questionnaires
@using Namezr.Features.Questionnaires.Data
@using Namezr.Infrastructure.Data
@using Havit.Blazor.Components.Web.Bootstrap
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Client.Types
@using Namezr.Components.Account
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Creators.Services
@using Namezr.Features.Eligibility.Data
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Identity.Data
@using Namezr.Features.Questionnaires.Services

@inject ApplicationDbContext DbContext
@inject ISupportPlansService SupportPlansService
@inject IEligibilityService EligibilityService
@inject IdentityUserAccessor UserAccessor
@inject IFieldValueSerializer FieldValueSerializer

@if (_versionEntity is not null)
{
    <HxBreadcrumb>
        <HxBreadcrumbItem Text="Home" Href="/"/>
        <HxBreadcrumbItem Text="@_versionEntity.Questionnaire.Creator.DisplayName" Href="/"/>
        <HxBreadcrumbItem Text="Questionnaires" Href="/"/>
    </HxBreadcrumb>

    <h3>@_versionEntity?.Questionnaire.Title</h3>

    <div>
        <pre>@_versionEntity?.Questionnaire.Description</pre>
    </div>

    <HxCard>
        <BodyTemplate>
            <HxCardTitle>
                Ways to be eligible:
            </HxCardTitle>

            @{
                IEnumerable<IGrouping<(EligibilityType Type, Guid SupportTargetId), EligibilityOptionEntity>> groupedOptions = _versionEntity!
                    .Questionnaire
                    .EligibilityConfiguration
                    .Options!
                    .GroupBy(option => (option.PlanId.Type, option.PlanId.SupportPlanId!.SupportTargetId));
            }

            @foreach (var grouping in groupedOptions)
            {
                <strong>
                    @if (grouping.Key.Type == EligibilityType.SupportPlan)
                    {
                        EligibilityPlan matchingEligibilityPlan = _eligibilityPlans!.Values
                            .First(x => x.SupportPlan?.Id.SupportTargetId == grouping.Key.SupportTargetId);

                        <span>
                            @matchingEligibilityPlan.SupportPlan!.ServiceType
                        </span>
                    }
                    else
                    {
                        <span>Other</span>
                    }
                </strong>

                <ul>
                    @foreach (EligibilityOptionEntity option in grouping)
                    {
                        <li>
                            @if (option.PlanId.Type == EligibilityType.SupportPlan)
                            {
                                EligibilityPlan plan = _eligibilityPlans![option.PlanId];

                                <span>
                                    @plan.SupportPlan!.DisplayName
                                </span>
                            }
                            else
                            {
                                <span>@option.PlanId.VirtualEligibilityType</span>
                            }

                            @if (_eligiblePlanIds.Contains(option.PlanId))
                            {
                                <span class="ml-2 badge bg-success">Eligible</span>
                            }
                        </li>
                    }
                </ul>
            }
        </BodyTemplate>
    </HxCard>

    @* TODO: display the form, but disabled *@
    <AuthorizeView>
        <Authorized>
            @if (ConfigModel is not null)
            {
                <SubmissionEditor
                    Config="ConfigModel"
                    InitialValues="_initialValues"
                    QuestionnaireVersionId="QuestionnaireVersionId!.Value"
                />
            }
        </Authorized>

        <NotAuthorized>
            <p>You must be logged in to submit a response.</p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    private QuestionnaireVersionEntity? _versionEntity;

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    private QuestionnaireConfigModel? ConfigModel { get; set; }
    private Guid? QuestionnaireVersionId { get; set; }

    private IReadOnlyDictionary<EligibilityPlanId, EligibilityPlan>? _eligibilityPlans;
    private ImmutableHashSet<EligibilityPlanId> _eligiblePlanIds = ImmutableHashSet<EligibilityPlanId>.Empty;

    private Dictionary<string, SubmissionValueModel>? _initialValues;

    protected override async Task OnInitializedAsync()
    {
        _versionEntity = await DbContext.QuestionnaireVersions
            .AsNoTracking()
            .Include(x => x.Questionnaire.EligibilityConfiguration).ThenInclude(x => x.Options)
            .Include(x => x.Questionnaire.Creator)
            .Include(x => x.Fields!).ThenInclude(x => x.Field)
            .OrderByDescending(x => x.CreatedAt)
            .FirstOrDefaultAsync(q => q.Questionnaire.Id == QuestionnaireId);

        ConfigModel = _versionEntity?.MapToConfigModel();
        QuestionnaireVersionId = _versionEntity?.Id;

        _eligibilityPlans = EligibilityService
            .GetEligibilityDescriptorsFromAllSupportPlans(
                // TODO: in parallel
                await SupportPlansService.GetSupportPlans(_versionEntity!.Questionnaire.CreatorId)
            )
            .ToDictionary(plan => plan.Id);

        ApplicationUser? user = await UserAccessor.GetUserAsync(HttpContext);

        if (user is not null)
        {
            EligibilityResult eligibilityResult = await EligibilityService.ClassifyEligibility(
                user.Id,
                _versionEntity.Questionnaire.EligibilityConfiguration,
                UserStatusSyncEagerness.Default
            );

            _eligiblePlanIds = eligibilityResult.EligiblePlanIds;

            QuestionnaireSubmissionEntity? submission = await DbContext.QuestionnaireSubmissions
                .Include(x => x.FieldValues)
                .FirstOrDefaultAsync(x => x.UserId == user.Id && x.Version.QuestionnaireId == QuestionnaireId);

            if (submission is not null)
            {
                _initialValues = new Dictionary<string, SubmissionValueModel>();

                foreach (QuestionnaireFieldValueEntity fieldValue in submission.FieldValues!)
                {
                    QuestionnaireFieldType? fieldType = _versionEntity.Fields!
                        .SingleOrDefault(fieldConfig => fieldConfig.FieldId == fieldValue.FieldId)
                        ?.Field.Type;

                    if (fieldType is null) continue;

                    _initialValues.Add(
                        fieldValue.FieldId.ToString(),
                        FieldValueSerializer.Deserialize(fieldType.Value, fieldValue.ValueSerialized)
                    );
                }
            }
        }
    }

}