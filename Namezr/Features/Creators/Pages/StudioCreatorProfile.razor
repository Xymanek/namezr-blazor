@page "/studio/{creatorId:guid}/config/profile"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Namezr.Components.Layout
@using Namezr.Infrastructure.Data
@using Namezr.Components
@using Namezr.Features.StudioCommon.Components
@using Microsoft.AspNetCore.Components.Sections
@using Namezr.Client
@using Namezr.Features.Creators.Data
@using Namezr.Features.Creators.Models
@using Namezr.Features.Files.Helpers
@using vNext.BlazorComponents.FluentValidation

@attribute [Authorize]
@layout StudioPageHeaderLayout

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ILogoStorageHelper LogoStorageHelper
@inject NavigationManager NavigationManager

<PageTitle>
    Creator profile
    <StudioTitleSuffix/>
</PageTitle>

<SectionContent SectionId="StudioPageHeaderLayout.BreadcrumbSectionId">
    <HxBreadcrumb>
        <ConfigurationBreadcrumbItems CreatorId="CreatorId"/>

        <HxBreadcrumbItem
            Href=@($"studio/{CreatorId.NoHyphens()}/config/profile")
            Text="Profile"
        />
    </HxBreadcrumb>
</SectionContent>

<SectionContent SectionId="StudioPageHeaderLayout.TitleSectionId">
    Creator profile
</SectionContent>

<HxCard>
    <BodyTemplate>
        <EditForm
            Model="FormModel"
            enctype="multipart/form-data"
            OnValidSubmit="HandleValidSubmit"
            FormName="update-creator-profile"
        >
            <FluentValidationValidator/>

            <div class="row">
                <div class="col-lg-6">
                    <HxInputText
                        Label="Display name"
                        @bind-Value="FormModel.DisplayName"
                    />
                </div>

                <div class="col-lg-6">
                    <div class="d-flex flex-column gap-3">
                        <strong>Logo</strong>

                        @if (_creator?.LogoFileId is null)
                        {
                            <em>Currently no logo</em>
                        }
                        else
                        {
                            <img
                                src="@($"{ApiEndpointPaths.CreatorsLogoDownload}?creatorId={_creator.Id}")"
                                alt="Logo"
                                class="me-2"
                                style="max-width: 250px; max-height: 250px;"
                            />

                            <strong>New logo</strong>
                        }

                        <InputFile
                            class="form-control"
                            name="@($"{nameof(FormModel)}.{nameof(FormModel.LogoReplacement)}")"
                        />
                    </div>
                </div>
            </div>

            <HxSubmit
                Text="Save"
                Color="ThemeColor.Primary"
            />
        </EditForm>
    </BodyTemplate>
</HxCard>

@code {

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [CascadingParameter]
    public required IStudioPageContext StudioContext { get; set; }

    [Parameter]
    public Guid CreatorId { get; set; }

    [SupplyParameterFromForm]
    private CreatorProfileFromModel FormModel { get; set; } = null!;

    private CreatorEntity? _creator;

    protected override async Task OnInitializedAsync()
    {
        bool populateForm = false;

        // ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
        if (FormModel is null)
        {
            populateForm = true;
            FormModel = new CreatorProfileFromModel();
        }

        await StudioContext.SetCurrentCreatorAndValidateAccess(CreatorId);

        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();

        _creator = await dbContext.Creators
            .SingleAsync(x => x.Id == CreatorId);

        if (populateForm)
        {
            FormModel.DisplayName = _creator.DisplayName;
        }
    }

    private async Task HandleValidSubmit()
    {
        CancellationToken ct = HttpContext.RequestAborted;
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync(ct);

        CreatorEntity creator = await dbContext.Creators
            .AsTracking()
            .SingleAsync(x => x.Id == CreatorId, cancellationToken: ct);

        creator.DisplayName = FormModel.DisplayName;

        if (FormModel.LogoReplacement is not null)
        {
            creator.LogoFileId = await LogoStorageHelper.MaybeResizeAndStoreLogo(
                FormModel.LogoReplacement.OpenReadStream(),
                ct
            );
        }

        await dbContext.SaveChangesAsync(ct);

        // Reload the page with new info and to avoid the "do you want to resubmit form"
        // prompt if user manually tries to refresh the page
        NavigationManager.Refresh();

        // TODO: success message
    }

}