@page "/polls/{PollId:guid}"

@using System.Diagnostics
@using EntityFramework.Exceptions.Common
@using Microsoft.EntityFrameworkCore
@using Namezr.Features.Consumers.Services
@using Namezr.Features.Eligibility.Services
@using Namezr.Features.Identity.Helpers
@using Namezr.Features.Polls.Data
@using Namezr.Features.Polls.Services
@using Namezr.Infrastructure.Data
@using Namezr.Components
@using Namezr.Features.PublicCommon.Components
@using Namezr.Features.Eligibility.Components
@using Namezr.Features.Polls.Models

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IEligibilityService EligibilityService
@inject IdentityUserAccessor UserAccessor
@inject IPollResultsRetriever ResultsRetriever
@inject NavigationManager NavigationManager

@if (_poll is not null)
{
    <PageTitle>
        <StaticTruncatedText Text="@_poll.Title" MaxLength="25"/>
        <CreatorPublicTitleSuffix Creator="_poll.Creator"/>
    </PageTitle>

    /* TODO */
    @*<HxBreadcrumb>
        <HxBreadcrumbItem Text="Home" Href="/"/>
        <HxBreadcrumbItem Text="@_poll.Creator.DisplayName" Href="/"/>
        <HxBreadcrumbItem Text="Questionnaires" Href="/"/>
    </HxBreadcrumb>*@

    <ActivityCreatorHeader
        Creator="_poll.Creator"
        ActivityTitle="@_poll.Title"
    />

    <div>
        <pre>@_poll.Description</pre>
    </div>

    <h3>Ways to be eligible:</h3>

    @if (_eligibilityResult is not null)
    {
        <PublicEligibilityPresenter
            Configuration="_poll.EligibilityConfiguration"
            EligibilityResult="_eligibilityResult"
        />
    }

    <div class="mb-2"></div>

    @switch (_disabledReason)
    {
        case null:
            break;

        case DisabledReason.Closed:
            <HxAlert Color="ThemeColor.Secondary">
                Voting is currently closed.
            </HxAlert>
            break;

        case DisabledReason.NotLoggedIn:
            <HxAlert Color="ThemeColor.Warning">
                Please log in to submit a response.
            </HxAlert>
            break;

        case DisabledReason.NotEligible:
            <HxAlert Color="ThemeColor.Warning">
                You are currently not eligible.
            </HxAlert>
            break;

        case DisabledReason.AlreadyVoted:
            <HxAlert Color="ThemeColor.Secondary">
                You have already voted
            </HxAlert>
            break;

        default:
            throw new UnreachableException();
    }

    <HxCard>
        <BodyTemplate>
            <HxAlert Color="ThemeColor.Info">
                @if (_poll.IsAnonymous)
                {
                    <span>Your vote will be anonymous. Creator cannot see which option you chose.</span>
                }
                else
                {
                    <span>Your vote will not be anonymous. Creator can see which option you chose.</span>
                }
            </HxAlert>

            @foreach (PollOptionEntity option in _poll.Options!)
            {
                <div class="row">
                    <div class="col-11 col-md-6 col-lg-3">
                        @option.Title
                        @* TODO: description *@
                    </div>

                    @if (_existingChoice?.OptionId == option.Id)
                    {
                        /* Push to end if non-mobile */
                        <div class="col-1 order-md-last">
                            <HxIcon Icon="BootstrapIcon.Check"/>
                        </div>
                    }
                    else if (_disabledReason == null)
                    {
                        /* Push to end if non-mobile */
                        <div class="col-1 order-md-last">
                            <form
                                @formname="@($"vote-{option.Id}")"
                                method="post"
                                @onsubmit="@(() => HandleVoteSubmit(option.Id))"
                            >
                                <AntiforgeryToken/>

                                <HxSubmit
                                    CssClass="w-100"
                                    Color="ThemeColor.Primary"
                                    Icon="BootstrapIcon.Check"
                                />
                            </form>
                        </div>
                    }

                    @* TODO: larger if voting is disabled and there is no existing choice *@
                    <div class="col-md-5 col-lg-8">
                        <HxProgressBar
                            Value="GetWeightedRatio(option.Id)"
                            Label="@($"{GetWeightedRatio(option.Id):P2}%")"
                        />
                    </div>
                </div>
            }
        </BodyTemplate>
    </HxCard>

    @if (_poll.AllowUsersToAddOptions && (HttpContext.User.Identity?.IsAuthenticated ?? false))
    {
        <HxCard>
            <HeaderTemplate>
                Add option
            </HeaderTemplate>
            <BodyTemplate>
                @if (_newOptionNameWasDuplicate)
                {
                    <HxAlert Color="ThemeColor.Danger">
                        An option with this name already exists.
                    </HxAlert>
                }

                <EditForm
                    method="post"
                    FormName="add-option"
                    Model="NewOptionModel"
                    OnValidSubmit="HandleAddOption"
                >
                    <HxInputText
                        Label="Title"
                        @bind-Value="NewOptionModel.Title"
                    />
                    <HxInputTextArea
                        Label="Description"
                        @bind-Value="NewOptionModel.Description"
                    />

                    <HxSubmit
                        Color="ThemeColor.Primary"
                        Text="Submit"
                    />
                </EditForm>
            </BodyTemplate>
        </HxCard>
    }
}

@code
{
    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [Parameter]
    public Guid PollId { get; set; }

    [SupplyParameterFromForm]
    public PollPublicNewOptionModel NewOptionModel { get; set; } = new();

    private PollEntity? _poll;
    private IReadOnlyDictionary<Guid, PollOptionResult> _perOptionStats = new Dictionary<Guid, PollOptionResult>();

    private DisabledReason? _disabledReason;
    private EligibilityResult? _eligibilityResult;
    private PollChoiceEntity? _existingChoice;

    protected override async Task OnInitializedAsync()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        CancellationToken ct = HttpContext.RequestAborted;

        _poll = await dbContext.Polls
            .Include(x => x.Creator)
            .Include(x => x.Options)
            .Include(x => x.EligibilityConfiguration).ThenInclude(x => x.Options)
            .AsSplitQuery()
            .SingleOrDefaultAsync(x => x.Id == PollId, ct);

        if (_poll is null)
        {
            // TODO: 404
            throw new Exception($"Poll with ID {PollId} not found.");
        }

        if (!_poll.IsOpen)
        {
            _disabledReason = DisabledReason.Closed;
        }

        _perOptionStats = await ResultsRetriever.CalculatePerOptionStats(PollId, ct);

        if (!UserAccessor.TryGetUserId(HttpContext, out Guid userId))
        {
            _disabledReason ??= DisabledReason.NotLoggedIn;
        }
        else
        {
            _eligibilityResult = await EligibilityService.ClassifyEligibility(
                userId,
                _poll.EligibilityConfiguration,
                UserStatusSyncEagerness.Default
            );

            if (!_eligibilityResult.Any)
            {
                _disabledReason ??= DisabledReason.NotEligible;
            }

            _existingChoice = await dbContext.PollChoices
                .Where(x => x.PollId == PollId && x.UserId == userId)
                .SingleOrDefaultAsync(ct);

            if (_existingChoice is not null)
            {
                _disabledReason ??= DisabledReason.AlreadyVoted;
            }
        }
    }

    private enum DisabledReason
    {
        Closed,
        NotLoggedIn,
        NotEligible,
        AlreadyVoted,
    }

    // TODO: dedicated return object for CalculatePerOptionStats and move that helper there
    private float GetWeightedRatio(Guid optionId)
    {
        return (float)(_perOptionStats.GetValueOrDefault(optionId)?.WeightedRatio ?? 0);
    }

    private async Task HandleVoteSubmit(Guid optionId)
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        CancellationToken ct = HttpContext.RequestAborted;

        PollChoiceEntity newChoice = new()
        {
            PollId = PollId,

            OptionId = optionId,
            UserId = UserAccessor.GetRequiredUserId(HttpContext),

            Weight = _eligibilityResult!.Modifier,
        };

        dbContext.PollChoices.Add(newChoice);
        await dbContext.SaveChangesAsync(ct);

        NavigationManager.Refresh();
    }

    private bool _newOptionNameWasDuplicate;

    private async Task HandleAddOption()
    {
        await using ApplicationDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        CancellationToken ct = HttpContext.RequestAborted;

        PollEntity pollForUpdate = await dbContext.Polls
            .AsTracking()
            .Include(x => x.Options)
            .SingleAsync(x => x.Id == PollId, ct);

        pollForUpdate.OptionsSetVersionMarker = Guid.NewGuid();
        pollForUpdate.Options!.Add(new PollOptionEntity
        {
            Poll = pollForUpdate,

            Title = NewOptionModel.Title,
            Description = NewOptionModel.Description,

            Order = pollForUpdate.Options!.Max(poll => poll.Order) + 1,

            WasUserAdded = true,
        });

        try
        {
            await dbContext.SaveChangesAsync(ct);
        }
        catch (UniqueConstraintException e) when (
            e.ConstraintProperties is [nameof(PollOptionEntity.PollId), nameof(PollOptionEntity.Title)]
        )
        {
            _newOptionNameWasDuplicate = true;
            return;
        }

        NavigationManager.Refresh();
    }
}
