// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Namezr.Infrastructure.Data;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Namezr.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250223143001_EligibilityOptions2")]
    partial class EligibilityOptions2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.ConsumerSupportStatusEntity", b =>
                {
                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupportPlanId")
                        .HasColumnType("text");

                    b.Property<Instant?>("EnrolledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TargetConsumerId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsumerId", "SupportPlanId");

                    b.HasIndex("TargetConsumerId");

                    b.ToTable("ConsumerSupportStatus");
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.TargetConsumerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupportTargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupportTargetId");

                    b.ToTable("TargetConsumers");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorStaffEntity", b =>
                {
                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CreatorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CreatorStaff");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportPlanInfoEntity", b =>
                {
                    b.Property<Guid>("SupportTargetId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupportPlanId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SupportTargetId", "SupportPlanId");

                    b.ToTable("SupportPlans");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportTargetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwningStaffMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long?>("ServiceTokenId")
                        .HasColumnType("bigint");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("StaffEntryCreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StaffEntryUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OwningStaffMemberId");

                    b.HasIndex("ServiceTokenId");

                    b.HasIndex("StaffEntryCreatorId", "StaffEntryUserId");

                    b.ToTable("SupportTargets");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("OwnershipType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EligibilityConfigurations");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityOptionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PriorityGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PriorityModifier")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("EligibilityOptions");
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long?>("ThirdPartyTokenId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ThirdPartyTokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApprovalMode")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("EligibilityConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EligibilityConfigurationId")
                        .IsUnique();

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldConfigurationEntity", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("FieldId", "VersionId");

                    b.HasIndex("VersionId");

                    b.ToTable("QuestionnaireFieldConfigurations");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireFields");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldValueEntity", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValueSerialized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubmissionId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("QuestionnaireFieldValues");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VersionId");

                    b.ToTable("QuestionnaireSubmissions");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireVersions");
                });

            modelBuilder.Entity("Namezr.Features.ThirdParty.ThirdPartyToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<JsonDocument>("Context")
                        .HasColumnType("jsonb");

                    b.Property<string>("ServiceAccountId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("ServiceType", "ServiceAccountId", "TokenType");

                    b.HasIndex("ServiceType", "ServiceAccountId");

                    b.ToTable("ThirdPartyTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.ConsumerSupportStatusEntity", b =>
                {
                    b.HasOne("Namezr.Features.Consumers.Data.TargetConsumerEntity", "TargetConsumer")
                        .WithMany()
                        .HasForeignKey("TargetConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetConsumer");
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.TargetConsumerEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.SupportTargetEntity", "SupportTarget")
                        .WithMany()
                        .HasForeignKey("SupportTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTarget");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorStaffEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("Staff")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportPlanInfoEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.SupportTargetEntity", "SupportTarget")
                        .WithMany("SupportPlansInfos")
                        .HasForeignKey("SupportTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTarget");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportTargetEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("SupportTargets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "OwningStaffMember")
                        .WithMany()
                        .HasForeignKey("OwningStaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.ThirdParty.ThirdPartyToken", "ServiceToken")
                        .WithMany()
                        .HasForeignKey("ServiceTokenId");

                    b.HasOne("Namezr.Features.Creators.Data.CreatorStaffEntity", "StaffEntry")
                        .WithMany("OwnedSupportTargets")
                        .HasForeignKey("StaffEntryCreatorId", "StaffEntryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("OwningStaffMember");

                    b.Navigation("ServiceToken");

                    b.Navigation("StaffEntry");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityOptionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", "Configuration")
                        .WithMany("Options")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Namezr.Client.Types.EligibilityPlanId", "PlanId", b1 =>
                        {
                            b1.Property<long>("EligibilityOptionEntityId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.Property<int?>("VirtualEligibilityType")
                                .HasColumnType("integer");

                            b1.HasKey("EligibilityOptionEntityId");

                            b1.ToTable("EligibilityOptions");

                            b1.ToJson("PlanId");

                            b1.WithOwner()
                                .HasForeignKey("EligibilityOptionEntityId");

                            b1.OwnsOne("Namezr.Client.Types.SupportPlanFullId", "SupportPlanId", b2 =>
                                {
                                    b2.Property<long>("EligibilityPlanIdEligibilityOptionEntityId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("SupportPlanId")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<Guid>("SupportTargetId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("EligibilityPlanIdEligibilityOptionEntityId");

                                    b2.ToTable("EligibilityOptions");

                                    b2.WithOwner()
                                        .HasForeignKey("EligibilityPlanIdEligibilityOptionEntityId");
                                });

                            b1.Navigation("SupportPlanId");
                        });

                    b.Navigation("Configuration");

                    b.Navigation("PlanId")
                        .IsRequired();
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUserLogin", b =>
                {
                    b.HasOne("Namezr.Features.ThirdParty.ThirdPartyToken", "ThirdPartyToken")
                        .WithMany()
                        .HasForeignKey("ThirdPartyTokenId");

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThirdPartyToken");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("Questionnaires")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", "EligibilityConfiguration")
                        .WithOne("Questionnaire")
                        .HasForeignKey("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "EligibilityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("EligibilityConfiguration");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldConfigurationEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", "Field")
                        .WithMany("Configurations")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", "Version")
                        .WithMany("Fields")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Namezr.Client.Studio.Questionnaires.Edit.QuestionnaireFileUploadFieldOptionsModel", "FileUploadOptions", b1 =>
                        {
                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityFieldId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityVersionId")
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<List<string>>("AllowedExtensions")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<int>("MaxItemCount")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("MaxItemSize")
                                .HasColumnType("numeric");

                            b1.HasKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");

                            b1.ToTable("QuestionnaireFieldConfigurations");

                            b1.ToJson("FileUploadOptions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");
                        });

                    b.OwnsOne("Namezr.Client.Studio.Questionnaires.Edit.QuestionnaireNumberFieldOptionsModel", "NumberOptions", b1 =>
                        {
                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityFieldId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityVersionId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("MaxValue")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("MinValue")
                                .HasColumnType("numeric");

                            b1.HasKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");

                            b1.ToTable("QuestionnaireFieldConfigurations");

                            b1.ToJson("NumberOptions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");
                        });

                    b.OwnsOne("Namezr.Client.Studio.Questionnaires.Edit.QuestionnaireTextFieldOptionsModel", "TextOptions", b1 =>
                        {
                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityFieldId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityVersionId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsMultiline")
                                .HasColumnType("boolean");

                            b1.Property<int?>("MaxLength")
                                .HasColumnType("integer");

                            b1.Property<int?>("MinLength")
                                .HasColumnType("integer");

                            b1.HasKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");

                            b1.ToTable("QuestionnaireFieldConfigurations");

                            b1.ToJson("TextOptions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");
                        });

                    b.Navigation("Field");

                    b.Navigation("FileUploadOptions");

                    b.Navigation("NumberOptions");

                    b.Navigation("TextOptions");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldValueEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", "Submission")
                        .WithMany("FieldValues")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithMany("Versions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorEntity", b =>
                {
                    b.Navigation("Questionnaires");

                    b.Navigation("Staff");

                    b.Navigation("SupportTargets");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorStaffEntity", b =>
                {
                    b.Navigation("OwnedSupportTargets");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportTargetEntity", b =>
                {
                    b.Navigation("SupportPlansInfos");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", b =>
                {
                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", b =>
                {
                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
