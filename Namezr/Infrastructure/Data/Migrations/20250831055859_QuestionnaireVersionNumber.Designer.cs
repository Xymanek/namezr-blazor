// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Namezr.Infrastructure.Data;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Namezr.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250831055859_QuestionnaireVersionNumber")]
    partial class QuestionnaireVersionNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.ConsumerSupportStatusEntity", b =>
                {
                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupportPlanId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Instant?>("EnrolledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("ConsumerId", "SupportPlanId");

                    b.ToTable("ConsumerSupportStatus");
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.TargetConsumerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant?>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RelationshipId")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ServiceUserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("SupportTargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupportTargetId");

                    b.ToTable("TargetConsumers");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("LogoFileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorStaffEntity", b =>
                {
                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CreatorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CreatorStaff");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.StaffInviteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("StaffInvites");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportPlanInfoEntity", b =>
                {
                    b.Property<Guid>("SupportTargetId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupportPlanId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SupportTargetId", "SupportPlanId");

                    b.ToTable("SupportPlans");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportTargetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HomeUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("JoinUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("LogoFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwningStaffMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long?>("ServiceTokenId")
                        .HasColumnType("bigint");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("StaffEntryCreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StaffEntryUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OwningStaffMemberId");

                    b.HasIndex("ServiceTokenId");

                    b.HasIndex("StaffEntryCreatorId", "StaffEntryUserId");

                    b.ToTable("SupportTargets");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("OwnershipType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EligibilityConfigurations");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityOptionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxSubmissionsPerUser")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PriorityGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PriorityModifier")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("EligibilityOptions");
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long?>("ThirdPartyTokenId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ThirdPartyTokenId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollChoiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PollId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId", "PollId");

                    b.HasIndex("OptionId");

                    b.HasIndex("PollId");

                    b.ToTable("PollChoices");
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowUsersToAddOptions")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("EligibilityConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OptionsSetVersionMarker")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EligibilityConfigurationId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollOptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PollId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("WasUserAdded")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollOptions");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.CannedCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CommentType")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId", "Title")
                        .IsUnique();

                    b.ToTable("CannedComments");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApprovalMode")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("EligibilityConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<int>("SubmissionOpenMode")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EligibilityConfigurationId")
                        .IsUnique();

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldConfigurationEntity", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Automation")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("FieldId", "VersionId");

                    b.HasIndex("VersionId");

                    b.ToTable("QuestionnaireFieldConfigurations");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("QuestionnaireFields");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldValueEntity", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValueSerialized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubmissionId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("QuestionnaireFieldValues");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId", "Number")
                        .IsUnique();

                    b.ToTable("QuestionnaireVersions", t =>
                        {
                            t.HasTrigger("set_version_number");

                            t.HasCheckConstraint("CK_Version_Number_AboveZero", "\"Number\" > 0");
                        });
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionNumberSequenceEntity", b =>
                {
                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<int>("Counter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("QuestionnaireId");

                    b.ToTable("QuestionnaireVersionNumberSequences");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionAttributeEntity", b =>
                {
                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("character varying(15000)");

                    b.HasKey("SubmissionId", "Key");

                    b.ToTable("SubmissionAttributes");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("InstigatorIsProgrammatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("InstigatorIsStaff")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("InstigatorUserId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("OccuredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstigatorUserId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionHistoryEntries");

                    b.HasDiscriminator<int>("Type").IsComplete(true);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionLabelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Colour")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsSubmitterVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId", "Text")
                        .IsUnique();

                    b.ToTable("SubmissionLabels");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionLabelLinkEntity", b =>
                {
                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("LabelId", "SubmissionId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("QuestionnaireSubmissions_Labels", (string)null);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionNumberSequenceEntity", b =>
                {
                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<int>("Counter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("QuestionnaireId");

                    b.ToTable("SubmissionNumberSequences");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionBatchEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BatchType")
                        .HasColumnType("integer");

                    b.Property<Instant>("RollCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("RollStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("SelectionBatches");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionCandidateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionEntryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BatchId")
                        .HasColumnType("bigint");

                    b.Property<int>("BatchPosition")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("SelectionEntries");

                    b.HasDiscriminator<string>("Type").HasValue("SelectionEntryEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionSeriesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CompleteCyclesCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompletedSelectionMarker")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OwnershipType")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("SelectionSeries");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionUserDataEntity", b =>
                {
                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("LatestModifier")
                        .HasColumnType("numeric");

                    b.Property<int>("SelectedCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSelectedCount")
                        .HasColumnType("integer");

                    b.HasKey("SeriesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SelectionUserData");
                });

            modelBuilder.Entity("Namezr.Features.ThirdParty.Data.ThirdPartyToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<JsonDocument>("Context")
                        .HasColumnType("jsonb");

                    b.Property<string>("ServiceAccountId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("ServiceType", "ServiceAccountId", "TokenType");

                    b.HasIndex("ServiceType", "ServiceAccountId");

                    b.ToTable("ThirdPartyTokens");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryApprovalGrantedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryApprovalRemovedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryAttributeUpdatedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryFileDownloadedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("InBatch")
                        .HasColumnType("boolean");

                    b.HasIndex("FieldId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryInitialSubmitEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryInternalNoteEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("CommentContent");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryLabelAppliedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.Property<Guid?>("LabelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("LabelId");

                    b.HasIndex("LabelId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryLabelRemovedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.Property<Guid?>("LabelId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("LabelId");

                    b.HasIndex("LabelId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryPublicCommentEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("CommentContent");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryStaffViewedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryUpdatedValuesEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.SelectionSeries.Data.SelectionCandidateEntity");

                    b.Property<Instant?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer");

                    b.Property<Instant>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.HasIndex("VersionId", "Number")
                        .IsUnique();

                    b.ToTable("QuestionnaireSubmissions", t =>
                        {
                            t.HasTrigger("set_number");

                            t.HasTrigger("validate_number_per_questionnaire");

                            t.HasCheckConstraint("CK_Number_AboveZero", "\"Number\" > 0");
                        });
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionEntryEventEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.SelectionSeries.Data.SelectionEntryEntity");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionEntryPickedEntity", b =>
                {
                    b.HasBaseType("Namezr.Features.SelectionSeries.Data.SelectionEntryEntity");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.HasIndex("CandidateId");

                    b.HasDiscriminator().HasValue("Pick");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.ConsumerSupportStatusEntity", b =>
                {
                    b.HasOne("Namezr.Features.Consumers.Data.TargetConsumerEntity", "Consumer")
                        .WithMany("SupportStatuses")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.TargetConsumerEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.SupportTargetEntity", "SupportTarget")
                        .WithMany("Consumers")
                        .HasForeignKey("SupportTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTarget");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorStaffEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("Staff")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.StaffInviteEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportPlanInfoEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.SupportTargetEntity", "SupportTarget")
                        .WithMany("SupportPlansInfos")
                        .HasForeignKey("SupportTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTarget");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportTargetEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("SupportTargets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "OwningStaffMember")
                        .WithMany()
                        .HasForeignKey("OwningStaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.ThirdParty.Data.ThirdPartyToken", "ServiceToken")
                        .WithMany()
                        .HasForeignKey("ServiceTokenId");

                    b.HasOne("Namezr.Features.Creators.Data.CreatorStaffEntity", "StaffEntry")
                        .WithMany("OwnedSupportTargets")
                        .HasForeignKey("StaffEntryCreatorId", "StaffEntryUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("OwningStaffMember");

                    b.Navigation("ServiceToken");

                    b.Navigation("StaffEntry");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityOptionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", "Configuration")
                        .WithMany("Options")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Namezr.Client.Types.EligibilityPlanId", "PlanId", b1 =>
                        {
                            b1.Property<long>("EligibilityOptionEntityId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.Property<int?>("VirtualEligibilityType")
                                .HasColumnType("integer");

                            b1.HasKey("EligibilityOptionEntityId");

                            b1.ToTable("EligibilityOptions");

                            b1.ToJson("PlanId");

                            b1.WithOwner()
                                .HasForeignKey("EligibilityOptionEntityId");

                            b1.OwnsOne("Namezr.Client.Types.SupportPlanFullId", "SupportPlanId", b2 =>
                                {
                                    b2.Property<long>("EligibilityPlanIdEligibilityOptionEntityId")
                                        .HasColumnType("bigint");

                                    b2.Property<string>("SupportPlanId")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<Guid>("SupportTargetId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("EligibilityPlanIdEligibilityOptionEntityId");

                                    b2.ToTable("EligibilityOptions");

                                    b2.WithOwner()
                                        .HasForeignKey("EligibilityPlanIdEligibilityOptionEntityId");
                                });

                            b1.Navigation("SupportPlanId");
                        });

                    b.Navigation("Configuration");

                    b.Navigation("PlanId")
                        .IsRequired();
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUserLogin", b =>
                {
                    b.HasOne("Namezr.Features.ThirdParty.Data.ThirdPartyToken", "ThirdPartyToken")
                        .WithMany()
                        .HasForeignKey("ThirdPartyTokenId");

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThirdPartyToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollChoiceEntity", b =>
                {
                    b.HasOne("Namezr.Features.Polls.Data.PollOptionEntity", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Polls.Data.PollEntity", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany("PollChoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Poll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("Polls")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", "EligibilityConfiguration")
                        .WithMany()
                        .HasForeignKey("EligibilityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("EligibilityConfiguration");
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollOptionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Polls.Data.PollEntity", "Poll")
                        .WithMany("Options")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.CannedCommentEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany("Questionnaires")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", "EligibilityConfiguration")
                        .WithOne("Questionnaire")
                        .HasForeignKey("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "EligibilityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("EligibilityConfiguration");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldConfigurationEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", "Field")
                        .WithMany("Configurations")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", "Version")
                        .WithMany("Fields")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Namezr.Client.Studio.Questionnaires.Edit.QuestionnaireFileUploadFieldOptionsModel", "FileUploadOptions", b1 =>
                        {
                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityFieldId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityVersionId")
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<List<string>>("AllowedExtensions")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<int>("MaxItemCount")
                                .HasColumnType("integer");

                            b1.Property<long?>("MaxItemSizeBytes")
                                .HasColumnType("bigint");

                            b1.Property<int>("MinItemCount")
                                .HasColumnType("integer");

                            b1.Property<long?>("MinItemSizeBytes")
                                .HasColumnType("bigint");

                            b1.HasKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");

                            b1.ToTable("QuestionnaireFieldConfigurations");

                            b1.ToJson("FileUploadOptions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");
                        });

                    b.OwnsOne("Namezr.Client.Studio.Questionnaires.Edit.QuestionnaireNumberFieldOptionsModel", "NumberOptions", b1 =>
                        {
                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityFieldId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityVersionId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("MaxValue")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("MinValue")
                                .HasColumnType("numeric");

                            b1.HasKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");

                            b1.ToTable("QuestionnaireFieldConfigurations");

                            b1.ToJson("NumberOptions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");
                        });

                    b.OwnsOne("Namezr.Client.Studio.Questionnaires.Edit.QuestionnaireTextFieldOptionsModel", "TextOptions", b1 =>
                        {
                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityFieldId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("QuestionnaireFieldConfigurationEntityVersionId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsMultiline")
                                .HasColumnType("boolean");

                            b1.Property<int?>("MaxLength")
                                .HasColumnType("integer");

                            b1.Property<int?>("MinLength")
                                .HasColumnType("integer");

                            b1.HasKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");

                            b1.ToTable("QuestionnaireFieldConfigurations");

                            b1.ToJson("TextOptions");

                            b1.WithOwner()
                                .HasForeignKey("QuestionnaireFieldConfigurationEntityFieldId", "QuestionnaireFieldConfigurationEntityVersionId");
                        });

                    b.Navigation("Field");

                    b.Navigation("FileUploadOptions");

                    b.Navigation("NumberOptions");

                    b.Navigation("TextOptions");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldValueEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", "Submission")
                        .WithMany("FieldValues")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithMany("Versions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionNumberSequenceEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithOne()
                        .HasForeignKey("Namezr.Features.Questionnaires.Data.QuestionnaireVersionNumberSequenceEntity", "QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionAttributeEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryEntryEntity", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "InstigatorUser")
                        .WithMany()
                        .HasForeignKey("InstigatorUserId");

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", "Submission")
                        .WithMany("History")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstigatorUser");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionLabelEntity", b =>
                {
                    b.HasOne("Namezr.Features.Creators.Data.CreatorEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionLabelLinkEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.SubmissionLabelEntity", "Label")
                        .WithMany("SubmissionLinks")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", "Submission")
                        .WithMany("LabelLinks")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionNumberSequenceEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithOne()
                        .HasForeignKey("Namezr.Features.Questionnaires.Data.SubmissionNumberSequenceEntity", "QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionBatchEntity", b =>
                {
                    b.HasOne("Namezr.Features.SelectionSeries.Data.SelectionSeriesEntity", "Series")
                        .WithMany("Batches")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionEntryEntity", b =>
                {
                    b.HasOne("Namezr.Features.SelectionSeries.Data.SelectionBatchEntity", "Batch")
                        .WithMany("Entries")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionSeriesEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", "Questionnaire")
                        .WithMany("SelectionSeries")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionUserDataEntity", b =>
                {
                    b.HasOne("Namezr.Features.SelectionSeries.Data.SelectionSeriesEntity", "Series")
                        .WithMany("UserData")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryFileDownloadedEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryLabelAppliedEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.SubmissionLabelEntity", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Label");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionHistoryLabelRemovedEntity", b =>
                {
                    b.HasOne("Namezr.Features.Questionnaires.Data.SubmissionLabelEntity", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Label");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", b =>
                {
                    b.HasOne("Namezr.Features.Identity.Data.ApplicationUser", "User")
                        .WithMany("QuestionnaireSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", "Version")
                        .WithMany("Submissions")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionEntryPickedEntity", b =>
                {
                    b.HasOne("Namezr.Features.SelectionSeries.Data.SelectionCandidateEntity", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Namezr.Features.Consumers.Data.TargetConsumerEntity", b =>
                {
                    b.Navigation("SupportStatuses");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorEntity", b =>
                {
                    b.Navigation("Polls");

                    b.Navigation("Questionnaires");

                    b.Navigation("Staff");

                    b.Navigation("SupportTargets");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.CreatorStaffEntity", b =>
                {
                    b.Navigation("OwnedSupportTargets");
                });

            modelBuilder.Entity("Namezr.Features.Creators.Data.SupportTargetEntity", b =>
                {
                    b.Navigation("Consumers");

                    b.Navigation("SupportPlansInfos");
                });

            modelBuilder.Entity("Namezr.Features.Eligibility.Data.EligibilityConfigurationEntity", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Namezr.Features.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("PollChoices");

                    b.Navigation("QuestionnaireSubmissions");
                });

            modelBuilder.Entity("Namezr.Features.Polls.Data.PollEntity", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireEntity", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("SelectionSeries");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireFieldEntity", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireVersionEntity", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.SubmissionLabelEntity", b =>
                {
                    b.Navigation("SubmissionLinks");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionBatchEntity", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Namezr.Features.SelectionSeries.Data.SelectionSeriesEntity", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("Namezr.Features.Questionnaires.Data.QuestionnaireSubmissionEntity", b =>
                {
                    b.Navigation("FieldValues");

                    b.Navigation("History");

                    b.Navigation("LabelLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
