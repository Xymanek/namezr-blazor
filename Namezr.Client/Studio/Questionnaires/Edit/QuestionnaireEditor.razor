@using Namezr.Client.Infra
@using Namezr.Client.Types
@using vNext.BlazorComponents.FluentValidation

@rendermode InteractiveWebAssembly

@inject ISpaHttpClientProvider HttpClientProvider
@inject NavigationManager NavigationManager

<EditForm
    Model="Model"
    OnValidSubmit="HandleValidSubmit"
>
    <FluentValidationValidator/>

    <HxInputText
        Label="Title"
        @bind-Value="Model.Title"
    />
    <HxInputTextArea
        Label="Description"
        @bind-Value="Model.Description"
    />
    <div class="row">
        <HxSelect
            CssClass="col-6"
            Label="Approval mode"
            @bind-Value="Model.ApprovalMode"
            Data="ApprovalModeOptions"
            AutoSort="@false"
            ValueSelector="@(x => x.mode)"
            TextSelector="@(x => x.label)"
            Nullable="false"
        />
        <HxSelect
            CssClass="col-6"
            Label="Submission open mode"
            @bind-Value="Model.SubmissionOpenMode"
            Data="SubmissionOpenModeOptions"
            AutoSort="@false"
            ValueSelector="@(x => x.mode)"
            TextSelector="@(x => x.label)"
            Nullable="false"
        />
    </div>

    <div class="row">
        <div class="col-11">
            <h3>Eligibility</h3>
        </div>
        <div class="col-1 text-right">
            <HxButton
                Icon="@BootstrapIcon.Plus"
                Color="ThemeColor.Success"
                Tooltip="Add"
                OnClick="() => Model.EligibilityOptions.Add(new())"
            />
        </div>
    </div>

    <div>
        <HxValidationMessage
            For="@(() => Model.EligibilityOptions)"
        />
    </div>

    @for (int i = 0; i < Model.EligibilityOptions.Count; i++)
    {
        int optionIndex = i;

        <EligibilityOptionEditor
            EligibilityDescriptors="EligibilityDescriptors"
            @bind-Value="Model.EligibilityOptions[optionIndex]"
            CanRemove="Model.EligibilityOptions.Count > 1"
            OnRemove="() => Model.EligibilityOptions.RemoveAt(optionIndex)"
        />
    }

    <div class="row">
        <div class="col-11">
            <h3>Fields</h3>
        </div>
        <div class="col-1 text-right">
            <HxButton
                Icon="@BootstrapIcon.Plus"
                Color="ThemeColor.Success"
                Tooltip="Add"
                OnClick="Model.AddBlankField"
            />
        </div>
    </div>

    @for (int i = 0; i < Model.Fields.Count; i++)
    {
        int fieldIndex = i;

        <QuestionnaireFieldEditor
            ForbidTypeChangeFields="ForbidTypeChangeFields"
            @bind-Value="Model.Fields[fieldIndex]"
            CanMoveUp="fieldIndex > 0"
            OnMoveUp="() => MoveField(fieldIndex, -1)"
            CanMoveDown="fieldIndex + 1 < Model.Fields.Count"
            OnMoveDown="() => MoveField(fieldIndex, +1)"
            CanRemove="Model.Fields.Count > 1"
            OnRemove="() => Model.Fields.RemoveAt(fieldIndex)"
            OnSyncOptionsToNewType="newType => SyncOptionsToNewType(fieldIndex, newType)"
        />

        if (fieldIndex + 1 < Model.Fields.Count)
        {
            <hr/>
        }
    }

    <HxSubmit
        Text="Save"
        Color="@ThemeColor.Primary"
        Enabled="RendererInfo.IsInteractive"
        Spinner="IsSending"
    />
</EditForm>

@code {

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid? QuestionnaireId { get; set; }

    [Parameter]
    public required QuestionnaireEditModel InitialModel { get; set; }

    [Parameter]
    public required List<EligibilityPlan> EligibilityDescriptors { get; set; }

    private IReadOnlySet<Guid> ForbidTypeChangeFields { get; set; } = null!;
    private QuestionnaireEditModel Model { get; set; } = null!;

    private bool? IsSending { get; set; }

    protected override void OnInitialized()
    {
        Model = InitialModel.Clone();

        ForbidTypeChangeFields = Model.Fields
            .Select(x => x.Id)
            .ToHashSet();

        // Must be after ForbidTypeChangeFields is built, else it will include the default empty field
        if (Model.Fields.Count == 0)
        {
            Model.AddBlankField();
        }

        if (Model.EligibilityOptions.Count == 0)
        {
            Model.EligibilityOptions.Add(new());
        }
    }

    private void MoveField(int fieldIndex, int change)
    {
        QuestionnaireFieldEditModel field = Model.Fields[fieldIndex];

        Model.Fields.RemoveAt(fieldIndex);
        Model.Fields.Insert(fieldIndex + change, field);
    }

    private async Task HandleValidSubmit()
    {
        HttpClient http = HttpClientProvider.HttpClient;

        IsSending = true;
        try
        {
            HttpResponseMessage response;
            if (!QuestionnaireId.HasValue)
            {
                response = await http.PostAsJsonAsync(
                    ApiEndpointPaths.QuestionnairesNew,
                    new CreateQuestionnaireCommand
                    {
                        CreatorId = CreatorId,
                        Model = Model.Clone(),
                    }
                );
            }
            else
            {
                response = await http.PostAsJsonAsync(
                    ApiEndpointPaths.QuestionnairesUpdate,
                    new UpdateQuestionnaireCommand
                    {
                        Id = QuestionnaireId.Value,
                        Model = Model.Clone(),
                    }
                );
            }

            response.EnsureSuccessStatusCode();

            // TODO: redirect to studio questionnaire details page
        }
        finally
        {
            IsSending = false;
            StateHasChanged();
        }
    }

    private void SyncOptionsToNewType(int i, QuestionnaireFieldType? newType)
    {
        QuestionnaireFieldEditModel field = Model.Fields[i];

        if (newType != QuestionnaireFieldType.Text) field.TextOptions = null;
        if (newType != QuestionnaireFieldType.Number) field.NumberOptions = null;
        if (newType != QuestionnaireFieldType.FileUpload) field.FileUploadOptions = null;

        // ReSharper disable once SwitchStatementHandlesSomeKnownEnumValuesWithDefault
        switch (newType)
        {
            case QuestionnaireFieldType.Text when field.TextOptions == null:
                field.TextOptions = new QuestionnaireTextFieldOptionsModel();
                break;

            case QuestionnaireFieldType.Number when field.NumberOptions == null:
                field.NumberOptions = new QuestionnaireNumberFieldOptionsModel();
                break;

            case QuestionnaireFieldType.FileUpload when field.FileUploadOptions == null:
                field.FileUploadOptions = new QuestionnaireFileUploadFieldOptionsModel();
                break;
        }
    }

    private static readonly IReadOnlyList<(QuestionnaireApprovalMode mode, string label)> ApprovalModeOptions =
    [
        (QuestionnaireApprovalMode.GrantAutomatically, "Granted automatically"),
        (QuestionnaireApprovalMode.RequireApprovalRemoveWhenEdited, "Require approval (remove when edited)"),
        (QuestionnaireApprovalMode.RequireApprovalProhibitEditingApproved, "Require approval (prohibit editing when approved)"),
    ];

    private static readonly IReadOnlyList<(QuestionnaireSubmissionOpenMode mode, string label)> SubmissionOpenModeOptions =
    [
        (QuestionnaireSubmissionOpenMode.Open, "Open"),
        (QuestionnaireSubmissionOpenMode.EditExistingOnly, "Edit existing only"),
        (QuestionnaireSubmissionOpenMode.Closed, "Closed"),
    ];

}