@inherits Editor<QuestionnaireFieldEditModel>

<div class="row">
    <div class="col-7">
        <HxInputText @bind-Value="Value.Title" Label="Title"/>
    </div>
    <div class="col-3">
        <HxSelect
            TItem="(QuestionnaireFieldType type, string label)"
            TValue="QuestionnaireFieldType?"
            Label="Field type"
            Enabled="!ForbidTypeChangeFields.Contains(Value.Id)"
            @bind-Value="Value.Type"
            @bind-Value:after="() => OnSyncOptionsToNewType.InvokeAsync(Value.Type)"
            Data="QuestionnaireFieldTypes"
            AutoSort="@false"
            ValueSelector="@(x => x.type)"
            TextSelector="@(x => x.label)"
            Nullable="true"
            NullText="Pick one"
        />
    </div>
    <div class="col-2">
        <HxButtonGroup>
            <HxButton
                Icon="@BootstrapIcon.ArrowUp"
                Color="ThemeColor.Secondary"
                Tooltip="Move above"
                Enabled="CanMoveUp"
                OnClick="OnMoveUp"
            />
            <HxButton
                Icon="@BootstrapIcon.ArrowDown"
                Color="ThemeColor.Secondary"
                Tooltip="Move below"
                Enabled="CanMoveDown"
                OnClick="OnMoveDown"
            />
            <HxButton
                Icon="@BootstrapIcon.Trash"
                Color="ThemeColor.Danger"
                Tooltip="Remove"
                Enabled="CanRemove"
                OnClick="OnRemove"
            />
        </HxButtonGroup>
    </div>
</div>

<div>
    <HxInputTextArea @bind-Value="Value.Description" Label="Description"/>

    @if (Value.TextOptions is not null)
    {
        <div class="row">
            <div class="col-4">
                <HxInputNumber
                    @bind-Value="Value.TextOptions.MinLength"
                    Label="Minimum length"
                    Placeholder="None"
                />
            </div>
            <div class="col-4">
                <HxInputNumber
                    @bind-Value="Value.TextOptions.MaxLength"
                    Label="Maximum length"
                    Placeholder="None"
                />
            </div>
            <div class="col-4">
                <HxCheckbox @bind-Value="Value.TextOptions.IsMultiline" Label="Multiline"/>
            </div>
        </div>
    }

    @if (Value.NumberOptions is not null)
    {
        <div class="row">
            <div class="col-6">
                <HxInputNumber
                    @bind-Value="Value.NumberOptions.MinValue"
                    Label="Minimum value"
                    Placeholder="None"
                />
            </div>
            <div class="col-6">
                <HxInputNumber
                    @bind-Value="Value.NumberOptions.MaxValue"
                    Label="Maximum value"
                    Placeholder="None"
                />
            </div>
        </div>
    }

    @if (Value.FileUploadOptions is not null)
    {
        <div class="row">
            <div class="col-2">
                <HxInputNumber
                    @bind-Value="Value.FileUploadOptions.MaxItemCount"
                    Label="Maximum number of files"
                    Placeholder="No limit"
                />
            </div>
            <div class="col-2">
                <HxInputNumber
                    @bind-Value="Value.FileUploadOptions.MaxItemSize"
                    Label="@(Value.FileUploadOptions.MaxItemCount > 1 ? "Maximum file size per file" : "Maximum file size")"
                    Placeholder="None"
                />
            </div>
            <div class="col-8">
                <HxInputTags
                    @bind-Value="Value.FileUploadOptions.AllowedExtensions"
                    Label="Allowed file extensions"
                    Placeholder="Any"
                />
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public required IReadOnlySet<QuestionnaireFieldId> ForbidTypeChangeFields { get; set; }
    
    [Parameter]
    public bool CanMoveUp { get; set; }

    [Parameter]
    public EventCallback OnMoveUp { get; set; }

    [Parameter]
    public bool CanMoveDown { get; set; }

    [Parameter]
    public EventCallback OnMoveDown { get; set; }

    [Parameter]
    public bool CanRemove { get; set; }

    [Parameter]
    public EventCallback OnRemove { get; set; }

    [Parameter]
    public EventCallback<QuestionnaireFieldType?> OnSyncOptionsToNewType { get; set; }

    private static readonly IReadOnlyList<(QuestionnaireFieldType type, string label)> QuestionnaireFieldTypes =
    [
        (QuestionnaireFieldType.Text, "Text"),
        (QuestionnaireFieldType.Number, "Number"),
        (QuestionnaireFieldType.FileUpload, "File upload")
    ];

}