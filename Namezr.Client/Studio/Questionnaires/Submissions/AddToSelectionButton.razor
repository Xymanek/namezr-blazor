@* Note: this component is meant to be used only from other WASM components, not from SSR *@
@rendermode InteractiveWebAssembly

@using Namezr.Client.Infra
@using Namezr.Client.Studio.Questionnaires.Selection
@using Namzer.BlazorPortals

@inject ISpaHttpClientProvider HttpClientProvider
@inject IHxMessengerService HxMessenger

<HxButton 
    Text="Add to selection" 
    Icon="BootstrapIcon.PlusCircle" 
    Color="ThemeColor.Primary"
    OnClick="LoadSelectionSeriesAndShowModal"
/>

<BodyEndPortal>
    <SelectionSeriesPickerModal
        @ref="_selectionSeriesModal"
        HeaderText="Select series to add submission to"
        Options="_selectionSeries"
        OnSelected="AddToSelection"
        CreatorId="CreatorId"
        QuestionnaireId="QuestionnaireId"
    />

</BodyEndPortal>

@code {
    [Parameter]
    public required Guid CreatorId { get; set; }

    [Parameter]
    public required Guid QuestionnaireId { get; set; }

    [Parameter]
    public required Guid SubmissionId { get; set; }

    private SelectionSeriesPickerModal? _selectionSeriesModal;
    private List<SelectionSeriesModel> _selectionSeries = [];

    private async Task LoadSelectionSeriesAndShowModal()
    {
        HttpClient httpClient = HttpClientProvider.HttpClient;

        try
        {
            SelectionSeriesListRequest listRequest = new()
            {
                QuestionnaireId = QuestionnaireId,
            };

            HttpResponseMessage response = await httpClient.PostAsJsonAsync(
                ApiEndpointPaths.SelectionSeriesList,
                listRequest
            );
            
            if (response.IsSuccessStatusCode)
            {
                SelectionSeriesModel[]? series = await response.Content.ReadFromJsonAsync<SelectionSeriesModel[]>();
                _selectionSeries = series?.ToList() ?? [];
            }
            else
            {
                // Fallback - use empty list
                _selectionSeries = [];
            }

            await _selectionSeriesModal!.ShowAsync();
        }
        catch
        {
            // TODO: proper error handling
            _selectionSeries = [];
            await _selectionSeriesModal!.ShowAsync();
        }
    }

    private async Task AddToSelection(SelectionSeriesModel series)
    {
        await _selectionSeriesModal!.HideAsync();

        HttpClient httpClient = HttpClientProvider.HttpClient;

        try
        {
            ManualAddEntriesRequest request = new()
            {
                SeriesId = series.Id,
                SubmissionIds = [SubmissionId],
            };

            HttpResponseMessage response = await httpClient.PostAsJsonAsync(
                ApiEndpointPaths.SelectionManualAddEntries,
                request
            );

            response.EnsureSuccessStatusCode();

            ManualAddEntriesResponse? result = await response.Content.ReadFromJsonAsync<ManualAddEntriesResponse>();
            
            if (result != null)
            {
                if (result.SkippedSubmissions.Length > 0)
                {
                    SkippedSubmissionInfo skipped = result.SkippedSubmissions[0];
                    HxMessenger.AddWarning($"Submission could not be added: {skipped.UserDisplayName} (#{skipped.SubmissionNumber}): {skipped.Reason}");
                }
                else
                {
                    HxMessenger.AddInformation("Submission added to selection");
                }
            }
        }
        catch
        {
            // TODO: proper error handling
        }
    }
}