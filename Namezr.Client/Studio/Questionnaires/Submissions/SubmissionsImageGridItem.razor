@rendermode InteractiveWebAssembly

@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Shared
@using Namezr.Client.Studio.Questionnaires.Edit

@{
    SubmissionFileData[] images = GetImages().ToArray();
}

<div class="col-lg-2 col-md-4 col-12">
    @if (FieldToDisplay.Type != QuestionnaireFieldType.FileUpload)
    {
        <HxCard>
            <BodyTemplate>
                <div>Not an image</div>
            </BodyTemplate>
        </HxCard>
    }
    else if (images.Length < 1)
    {
        <HxCard>
            <BodyTemplate>
                <div>No images</div>
            </BodyTemplate>
        </HxCard>
    }
    else
    {
        /* TODO: border similar to HxCard */
        <div
            class="border rounded item-container @(IsSelected ? "item-selected" : "")"
            style="position: relative"
        >
            <div style="height: 300px">
                <HxCarousel Ride="CarouselRide.False" Controls="false" Crossfade="true">
                    @for (int i = 0; i < images.Length; i++)
                    {
                        SubmissionFileData file = images[i];

                        <HxCarouselItem Active="IsImageActive(images, i)">
                            <img
                                style="object-fit: cover; height: 300px; width: 100%"
                                alt="@file.Name"
                                src="@GetImageUrl(file)"
                            />
                        </HxCarouselItem>
                    }
                </HxCarousel>
            </div>

            @if (images.Length > 1)
            {
                <div style="display: grid; grid-auto-flow: column; grid-auto-columns: minmax(0, 1fr);">
                    @foreach (SubmissionFileData file in images)
                    {
                        string url = GetImageUrl(file);

                        <a href="@url"
                           target="_blank"
                           data-fancybox=@("gallery-submission-grid-item-" + Item.Id)
                           data-caption="@file.Name"
                           @onmouseover="() => OnHoverEnter(file)"
                           @onmouseout="() => OnHoverExit(file)"
                        >
                            <img
                                style="object-fit: cover; width: 100%; height: 50px"
                                alt="@file.Name"
                                src="@url"
                            />
                        </a>
                    }
                </div>
            }

            <div
                style="position: absolute; top: 10px; z-index: 1; left: -5px;"
                class="d-flex flex-column align-items-start gap-2"
            >
                <div class="d-flex align-items-center gap-2">
                    <div class="show-on-item-hover show-on-item-selected">
                        <HxCheckbox
                            @bind-Value="IsSelected"
                            @bind-Value:after="() => IsSelectedChanged.InvokeAsync(IsSelected)"
                        />
                    </div>

                    <div class="px-1 text-bg-dark show-on-item-hover show-on-item-selected">
                        #@Item.Number
                    </div>

                    <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()/submissions/@Item.Id.NoHyphens()"
                       class="btn btn-primary py-0 px-1 show-on-item-hover">
                        <i class="bi bi-search"></i>
                    </a>
                </div>

                @* TODO: handle the case of too many labels. Vertical scrollbar that appears onhover? *@
                <div class="d-flex flex-column gap-1">
                    @foreach (SubmissionLabelModel label in Item.Labels)
                    {
                        <SubmissionImageGridLabel Label="label"/>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public required SubmissionTableItemModel Item { get; set; }

    [Parameter]
    public required QuestionnaireConfigFieldModel FieldToDisplay { get; set; }

    [Parameter]
    public required long CurrentIndexCounter { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public EventCallback<bool> IsSelectedChanged { get; set; }

    private IEnumerable<SubmissionFileData> GetImages()
    {
        if (!Item.Values.TryGetValue(FieldToDisplay.Id, out SubmissionValueModel? fieldValue))
        {
            yield break;
        }

        foreach (SubmissionFileData fileData in fieldValue.FileValue ?? [])
        {
            if (fileData.IsDisplayableImage())
            {
                yield return fileData;
            }
        }
    }

    private string GetImageUrl(SubmissionFileData file)
    {
        return $"{ApiEndpointPaths.QuestionnaireSubmissionDownloadFile}?submissionId={Item.Id}&fileId={file.Id}";
    }

    private SubmissionFileData? _currentlyHoveredFile;

    private void OnHoverEnter(SubmissionFileData file)
    {
        _currentlyHoveredFile = file;
    }

    private void OnHoverExit(SubmissionFileData file)
    {
        if (_currentlyHoveredFile == file)
        {
            _currentlyHoveredFile = null;
        }
    }

    private bool IsImageActive(SubmissionFileData[] images, int i)
    {
        // While hovering the preview, always show the hovered image
        if (_currentlyHoveredFile != null)
        {
            return _currentlyHoveredFile == images[i];
        }

        return CurrentIndexCounter % images.Length == i;
    }

}
