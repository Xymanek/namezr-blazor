@rendermode InteractiveWebAssembly

@using System.Diagnostics
@using Humanizer
@using Namezr.Client.Helpers
@using Namezr.Client.Infra
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Shared
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Client.Studio.Questionnaires.Submissions
@using Namezr.Client.Types

@inject ISpaHttpClientProvider HttpClientProvider

<HxListLayout TFilterModel="HxListLayout.NoFilter">
    <SearchTemplate>
        <div class="w-100">
            <div class="row">
                <div class="col-lg-1">
                    <HxInputNumber
                        Label="Min weight"
                        @bind-Value="@_filter.MinWeight"
                        @bind-Value:after="AfterGridFiltersChanged"
                    />
                </div>

                <div class="col-lg-1">
                    <HxInputNumber
                        Label="Max weight"
                        @bind-Value="@_filter.MaxWeight"
                        @bind-Value:after="AfterGridFiltersChanged"
                    />
                </div>

                <div class="col-lg-1">
                    <HxSelect
                        Label="Is approved"
                        NullText="N/A"
                        Data="[true, false]"
                        @bind-Value="@_filter.MatchIsApproved"
                        @bind-Value:after="AfterGridFiltersChanged"
                        ValueSelector="b => b"
                        TextSelector="@(b => b ? "Yes" : "No")"
                    />
                </div>

                <div class="col-lg-9">
                    <HxMultiSelect
                        Label="Columns"
                        Data="GetColumns()"
                        @bind-Value="_columns"
                        ValueSelector="@(x => x.Id)"
                        TextSelector="@(column => column.Label)"/>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <HxMultiSelect
                        TItem="EligibilityPlan"
                        TValue="EligibilityPlanId"
                        Label="Included eligibility plans"
                        EmptyText="No filter"
                        Data="EligibilityDescriptors"
                        @bind-Value="_filter.IncludedPlanIds"
                        @bind-Value:after="AfterGridFiltersChanged"
                        ValueSelector="@(x => x.Id)"
                        TextSelector="GetEligibilityDescriptorDisplayName"/>
                </div>

                <div class="col-lg-6">
                    <HxMultiSelect
                        TItem="EligibilityPlan"
                        TValue="EligibilityPlanId"
                        Label="Excluded eligibility plans"
                        EmptyText="No filter"
                        Data="EligibilityDescriptors"
                        @bind-Value="_filter.ExcludedPlanIds"
                        @bind-Value:after="AfterGridFiltersChanged"
                        ValueSelector="@(x => x.Id)"
                        TextSelector="GetEligibilityDescriptorDisplayName"/>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <HxMultiSelect
                        Label="Included labels"
                        EmptyText="No filter"
                        Data="PossibleLabels"
                        @bind-Value="_filter.IncludedLabelIds"
                        @bind-Value:after="AfterGridFiltersChanged"
                        ValueSelector="@(x => x.Id)"
                        TextSelector="@(label => label.Text)"/>
                </div>
                <div class="col-lg-6">
                    <HxMultiSelect
                        Label="Excluded labels"
                        EmptyText="No filter"
                        Data="PossibleLabels"
                        @bind-Value="_filter.ExcludedLabelIds"
                        @bind-Value:after="AfterGridFiltersChanged"
                        ValueSelector="@(x => x.Id)"
                        TextSelector="@(label => label.Text)"/>
                </div>
            </div>

            @if (AvailableAttributeKeys.Count > 0)
            {
                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Submission Attributes</h6>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <HxInputText
                            Label="Attribute key filter"
                            @bind-Value="_attributeKeyInput"
                            Placeholder="Enter attribute key"
                        />
                    </div>
                    <div class="col-lg-4">
                        <HxInputText
                            Label="Required value"
                            @bind-Value="_attributeValueInput"
                            Placeholder="Enter required value"
                        />
                    </div>
                    <div class="col-lg-2 d-flex align-items-end">
                        <HxButton
                            Text="Add Required"
                            Color="ThemeColor.Success"
                            OnClick="AddRequiredAttribute"
                            CssClass="w-100"
                            Enabled="!string.IsNullOrWhiteSpace(_attributeKeyInput) && !string.IsNullOrWhiteSpace(_attributeValueInput)"
                        />
                    </div>
                </div>
                
                @if (_filter.RequiredAttributes.Count > 0)
                {
                    <div class="row mt-2">
                        <div class="col-12">
                            <div class="d-flex flex-wrap gap-1">
                                <small class="text-muted me-2">Required:</small>
                                @foreach (var attr in _filter.RequiredAttributes)
                                {
                                    <HxBadge Color="ThemeColor.Success" CssClass="d-flex align-items-center">
                                        @attr.Key = @attr.Value
                                        <button type="button" class="btn-close btn-close-white ms-1" style="font-size: 0.7em;" @onclick="() => RemoveRequiredAttribute(attr.Key)"></button>
                                    </HxBadge>
                                }
                            </div>
                        </div>
                    </div>
                }

                <div class="row mt-2">
                    <div class="col-lg-6">
                        <HxInputText
                            Label="Exclude attribute key"
                            @bind-Value="_excludeAttributeKeyInput"
                            Placeholder="Enter attribute key"
                        />
                    </div>
                    <div class="col-lg-4">
                        <HxInputText
                            Label="Exclude value"
                            @bind-Value="_excludeAttributeValueInput"
                            Placeholder="Enter value to exclude"
                        />
                    </div>
                    <div class="col-lg-2 d-flex align-items-end">
                        <HxButton
                            Text="Add Excluded"
                            Color="ThemeColor.Danger"
                            OnClick="AddExcludedAttribute"
                            CssClass="w-100"
                            Enabled="!string.IsNullOrWhiteSpace(_excludeAttributeKeyInput) && !string.IsNullOrWhiteSpace(_excludeAttributeValueInput)"
                        />
                    </div>
                </div>
                
                @if (_filter.ExcludedAttributes.Count > 0)
                {
                    <div class="row mt-2">
                        <div class="col-12">
                            <div class="d-flex flex-wrap gap-1">
                                <small class="text-muted me-2">Excluded:</small>
                                @foreach (var attr in _filter.ExcludedAttributes)
                                {
                                    <HxBadge Color="ThemeColor.Danger" CssClass="d-flex align-items-center">
                                        @attr.Key = @attr.Value
                                        <button type="button" class="btn-close btn-close-white ms-1" style="font-size: 0.7em;" @onclick="() => RemoveExcludedAttribute(attr.Key)"></button>
                                    </HxBadge>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </SearchTemplate>

    <DataTemplate>
        <HxGrid
            TItem="SubmissionTableItemModel"
            @ref="_grid"
            DataProvider="GetGridData"
            PageSize="25"
            Responsive="true"
            MultiSelectionEnabled="true"
            @bind-SelectedDataItems="_selectedItems"
        >
            <Columns>

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.SubmissionNumber))"
                    HeaderText="Number"
                    ItemTextSelector="@(item => "#" + item.Number)"
                    SortKeySelector="item => item.Number"
                    IsDefaultSortColumn="true"
                />

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.UserDisplayName))"
                    HeaderText="User"
                    ItemTextSelector="item => item.UserDisplayName"
                />

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.InitiallySubmittedAt))"
                    HeaderText="Submitted at"
                    SortKeySelector="item => item.InitiallySubmittedAt"
                >
                    <ItemTemplate>
                        <RelativeTime Value="context.InitiallySubmittedAt"/>
                    </ItemTemplate>
                </HxGridColumn>

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.LastUpdateAt))"
                    HeaderText="Last updated"
                    SortKeySelector="item => item.LastUpdateAt"
                >
                    <ItemTemplate>
                        <RelativeTime Value="context.LastUpdateAt"/>
                    </ItemTemplate>
                </HxGridColumn>

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.IsApproved))"
                    HeaderText="Is approved"
                    SortKeySelector="item => item.IsApproved">
                    <ItemTemplate>
                        <YesNoBadge Value="context.IsApproved"/>
                    </ItemTemplate>
                </HxGridColumn>

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.Weight))"
                    HeaderText="Weight"
                    ItemTextSelector="@(item => item.Eligibility.Modifier.ToString())"
                    SortKeySelector="item => item.Eligibility.Modifier"
                />

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.Labels))"
                    HeaderText="Labels"
                >
                    <ItemTemplate>
                        <div class="d-flex flex-row gap-1 flex-wrap">
                            @foreach (SubmissionLabelModel label in context.Labels)
                            {
                                <SubmissionLabelPresenter Label="label"/>
                            }

                            @if (context.Labels.Count == 0)
                            {
                                <i>N/A</i>
                            }
                        </div>
                    </ItemTemplate>
                </HxGridColumn>

                <HxGridColumn
                    Visible="_columns.Contains(new SubmissionsColumnId(SubmissionsColumnType.EligibilityPlans))"
                    HeaderText="Eligible plans"
                >
                    <ItemTemplate>
                        <div class="d-flex flex-row gap-1 flex-wrap">
                            @foreach (EligibilityPlanId planId in context.Eligibility.EligiblePlanIds)
                            {
                                <HxBadge Color="ThemeColor.Secondary">
                                    @GetEligibilityDescriptorDisplayName(EligibilityDescriptors.Single(x => x.Id == planId))
                                </HxBadge>
                            }

                            @if (context.Eligibility.EligiblePlanIds.Count == 0)
                            {
                                <i>N/A</i>
                            }
                        </div>
                    </ItemTemplate>
                </HxGridColumn>

                @foreach (QuestionnaireConfigFieldModel field in QuestionnaireConfig.Fields)
                {
                    SubmissionsColumnId columnId = new()
                    {
                        Type = SubmissionsColumnType.FieldValue,
                        FieldId = field.Id,
                    };

                    <HxGridColumn
                        Visible="_columns.Contains(columnId)"
                        HeaderText="@field.Title"
                    >
                        <ItemTemplate>
                            @{
                                SubmissionValueModel? value = context.Values
                                    .GetValueOrDefault(columnId.FieldId!.Value);

                                if (value == null) return;
                            }

                            @switch (field.Type)
                            {
                                case QuestionnaireFieldType.Text:
                                    @value.StringValue
                                    break;

                                case QuestionnaireFieldType.Number:
                                    @value.NumberValue
                                    break;

                                case QuestionnaireFieldType.FileUpload:
                                    <SubmissionTableFileValue
                                        SubmissionId="context.Id"
                                        Value="value"/>
                                    break;

                                default:
                                    throw new UnreachableException();
                            }
                        </ItemTemplate>
                    </HxGridColumn>
                }

                <HxGridColumn ItemCssClass="width-1percent">
                    <HeaderTemplate>
                        @if (_isUpdatingLabels)
                        {
                            <HxSpinner/>
                        }

                        @* TODO: clipped by the table *@
                        <SubmissionsActionsDropdown
                            CreatorId="CreatorId"
                            QuestionnaireId="QuestionnaireId"
                            QuestionnaireConfig="QuestionnaireConfig"
                            PossibleLabels="PossibleLabels"
                            @bind-IsUpdatingLabels="_isUpdatingLabels"
                            SelectedItems="_selectedItems"
                            OnLabelAdded="tuple => tuple.Item1.Labels.Add(tuple.Item2)"
                            OnLabelRemoved="tuple => tuple.Item1.Labels.RemoveAll(label => label.Id == tuple.Item2.Id)"
                        />
                    </HeaderTemplate>

                    <ItemTemplate>
                        <a href="/studio/@CreatorId.NoHyphens()/questionnaires/@QuestionnaireId.NoHyphens()/submissions/@context.Id.NoHyphens()"
                           class="btn btn-primary py-0 px-1">
                            <i class="bi bi-search"></i>
                        </a>
                    </ItemTemplate>
                </HxGridColumn>
            </Columns>
        </HxGrid>
    </DataTemplate>
</HxListLayout>

@code {

    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public List<EligibilityPlan> EligibilityDescriptors { get; set; } = [];

    [Parameter]
    public required QuestionnaireConfigModel QuestionnaireConfig { get; set; }

    [Parameter]
    public List<SubmissionLabelModel> PossibleLabels { get; set; } = [];

    [Parameter]
    public List<string> AvailableAttributeKeys { get; set; } = [];

    [Parameter]
    public SubmissionTableItemModel[] Items { get; set; } = [];

    private HxGrid<SubmissionTableItemModel>? _grid;

    private readonly SubmissionFilterModel _filter = new();

    private List<SubmissionsColumnId> _columns =
    [
        new(SubmissionsColumnType.SubmissionNumber),
        new(SubmissionsColumnType.UserDisplayName),
        new(SubmissionsColumnType.InitiallySubmittedAt),
        new(SubmissionsColumnType.Weight),
        new(SubmissionsColumnType.IsApproved),
    ];

    private HashSet<SubmissionTableItemModel> _selectedItems = [];

    private Task<GridDataProviderResult<SubmissionTableItemModel>> GetGridData(
        GridDataProviderRequest<SubmissionTableItemModel> request
    )
    {
        IEnumerable<SubmissionTableItemModel> items = Items
            .Where(ShouldShowItem);

        return Task.FromResult(request.ApplyTo(items));
    }

    // TODO: unify with image grid
    private bool ShouldShowItem(SubmissionTableItemModel item)
    {
        if (_filter.MinWeight != null && item.Eligibility.Modifier < _filter.MinWeight) return false;
        if (_filter.MaxWeight != null && item.Eligibility.Modifier > _filter.MaxWeight) return false;

        // Check included plan IDs - if any are specified, at least one must match
        if (_filter.IncludedPlanIds.Count > 0 && !_filter.IncludedPlanIds.Any(planId => item.Eligibility.EligiblePlanIds.Contains(planId)))
            return false;

        // Check excluded plan IDs - if any match, exclude the item
        if (_filter.ExcludedPlanIds.Any(planId => item.Eligibility.EligiblePlanIds.Contains(planId)))
            return false;

        // Check included label IDs - if any are specified, at least one must match
        if (_filter.IncludedLabelIds.Count > 0 && !_filter.IncludedLabelIds.Any(labelId => item.Labels.Any(l => l.Id == labelId)))
            return false;

        // Check excluded label IDs - if any match, exclude the item
        if (_filter.ExcludedLabelIds.Any(labelId => item.Labels.Any(l => l.Id == labelId)))
            return false;

        // Check approved status if specified
        if (_filter.MatchIsApproved != null && item.IsApproved != _filter.MatchIsApproved)
            return false;

        // Check required attributes - all must match
        foreach (var requiredAttribute in _filter.RequiredAttributes)
        {
            if (!item.Attributes.TryGetValue(requiredAttribute.Key, out string? actualValue) || 
                actualValue != requiredAttribute.Value)
                return false;
        }

        // Check excluded attributes - any match excludes the item
        foreach (var excludedAttribute in _filter.ExcludedAttributes)
        {
            if (item.Attributes.TryGetValue(excludedAttribute.Key, out string? actualValue) && 
                actualValue == excludedAttribute.Value)
                return false;
        }

        return true;
    }

    // TODO: unify with option editor
    private string GetEligibilityDescriptorDisplayName(EligibilityPlan plan)
    {
        return plan.Type switch
        {
            EligibilityType.SupportPlan => $"{plan.SupportPlan!.ServiceType} - {plan.SupportPlan!.DisplayName}",
            EligibilityType.Virtual => "Virtual - " + plan.VirtualEligibilityType,

            _ => throw new UnreachableException(),
        };
    }

    private record Column
    {
        public required string Label { get; init; }
        public required SubmissionsColumnId Id { get; init; }
    }

    private IEnumerable<Column> GetColumns()
    {
        yield return ColumnForType(SubmissionsColumnType.SubmissionNumber);
        yield return ColumnForType(SubmissionsColumnType.UserDisplayName);
        yield return ColumnForType(SubmissionsColumnType.InitiallySubmittedAt);
        yield return ColumnForType(SubmissionsColumnType.LastUpdateAt);
        yield return ColumnForType(SubmissionsColumnType.IsApproved);
        yield return ColumnForType(SubmissionsColumnType.Labels);
        yield return ColumnForType(SubmissionsColumnType.Weight);
        yield return ColumnForType(SubmissionsColumnType.EligibilityPlans);

        foreach (QuestionnaireConfigFieldModel field in QuestionnaireConfig!.Fields)
        {
            yield return new Column
            {
                Label = field.Title,
                Id = new SubmissionsColumnId
                {
                    Type = SubmissionsColumnType.FieldValue,
                    FieldId = field.Id,
                },
            };
        }

        yield break;

        static Column ColumnForType(SubmissionsColumnType type)
        {
            return new Column
            {
                Id = new SubmissionsColumnId(type),
                Label = type.Humanize(),
            };
        }
    }

    private async Task AfterGridFiltersChanged()
    {
        if (_grid == null) return;

        await _grid.RefreshDataAsync();
    }

    // Attribute filter input fields
    private string _attributeKeyInput = "";
    private string _attributeValueInput = "";
    private string _excludeAttributeKeyInput = "";
    private string _excludeAttributeValueInput = "";

    private async Task AddRequiredAttribute()
    {
        if (string.IsNullOrWhiteSpace(_attributeKeyInput) || string.IsNullOrWhiteSpace(_attributeValueInput))
            return;

        _filter.RequiredAttributes[_attributeKeyInput.Trim()] = _attributeValueInput.Trim();
        _attributeKeyInput = "";
        _attributeValueInput = "";
        
        await AfterGridFiltersChanged();
    }

    private async Task RemoveRequiredAttribute(string key)
    {
        _filter.RequiredAttributes.Remove(key);
        await AfterGridFiltersChanged();
    }

    private async Task AddExcludedAttribute()
    {
        if (string.IsNullOrWhiteSpace(_excludeAttributeKeyInput) || string.IsNullOrWhiteSpace(_excludeAttributeValueInput))
            return;

        _filter.ExcludedAttributes[_excludeAttributeKeyInput.Trim()] = _excludeAttributeValueInput.Trim();
        _excludeAttributeKeyInput = "";
        _excludeAttributeValueInput = "";
        
        await AfterGridFiltersChanged();
    }

    private async Task RemoveExcludedAttribute(string key)
    {
        _filter.ExcludedAttributes.Remove(key);
        await AfterGridFiltersChanged();
    }

    private bool _isUpdatingLabels;
}