@rendermode InteractiveWebAssembly

@using Namezr.Client.Shared
@using Namezr.Client.Helpers
@using Namezr.Client.Infra
@using Namezr.Client.Public.Questionnaires
@using Namezr.Client.Studio.Questionnaires.Edit
@using Namezr.Client.Studio.Questionnaires.Selection
@using Namezr.Client.Types
@using Namzer.BlazorPortals

@inject ISpaHttpClientProvider HttpClientProvider

<HxDropdown>
    <HxDropdownToggleElement ElementName="div" role="button">
        <HxIcon Icon="BootstrapIcon.ThreeDotsVertical"/>
    </HxDropdownToggleElement>

    <HxDropdownMenu>
        <HxDropdownItem
            Icon="BootstrapIcon.PlusCircleFill"
            Enabled="!IsUpdatingLabels"
            OnClick="() => _applyLabelModal!.ShowAsync()"
        >
            Apply labels
        </HxDropdownItem>
        <HxDropdownItem
            Icon="BootstrapIcon.DashCircleFill"
            Enabled="!IsUpdatingLabels"
            OnClick="() => _removeLabelModal!.ShowAsync()"
        >
            Remove labels
        </HxDropdownItem>

        <HxDropdownDivider/>
        <HxDropdownItem
            Icon="BootstrapIcon.PlusCircle"
            Enabled="!IsUpdatingLabels && SelectedItems.Any()"
            OnClick="() => LoadSelectionSeriesAndShowModal()"
        >
            Add to selection
        </HxDropdownItem>

        @{
            QuestionnaireConfigFieldModel[] fileFields = QuestionnaireConfig.Fields
                .Where(field => field.Type == QuestionnaireFieldType.FileUpload)
                .ToArray();
        }

        @if (fileFields.Length > 0)
        {
            <HxDropdownDivider/>
            <HxDropdownItemText Icon="BootstrapIcon.Download">
                Download files
            </HxDropdownItemText>
        }

        @foreach (QuestionnaireConfigFieldModel field in fileFields)
        {
            <HxDropdownItemNavLink
                target="_blank"
                Href=@($"{ApiEndpointPaths.QuestionnaireSubmissionsBulkDownloadFiles}?QuestionnaireId={QuestionnaireId.NoHyphens()}&FieldId={field.Id.NoHyphens()}&{BulkDownloadsSubmissionQuery}")>
                <TruncatedText Text="@field.Title" MaxLength="25"/>
            </HxDropdownItemNavLink>
        }
    </HxDropdownMenu>
</HxDropdown>

<BodyEndPortal>
    <LabelPickerModal
        @ref="_applyLabelModal"
        HeaderText="Pick label to apply"
        CreatorId="CreatorId"
        Options="PossibleLabels"
        OnSelected="ApplyLabel"
    />

    <LabelPickerModal
        @ref="_removeLabelModal"
        HeaderText="Pick label to remove"
        CreatorId="CreatorId"
        Options="PossibleLabels"
        OnSelected="RemoveLabel"
    />

    <SelectionSeriesPickerModal
        @ref="_selectionSeriesModal"
        HeaderText="Select series to add submissions to"
        Options="_selectionSeries"
        OnSelected="AddToSelection"
    />

    @if (_addToSelectionResult != null && _showResultAlert)
    {
        <div class="alert @(_addToSelectionResult.SkippedSubmissions.Length > 0 ? "alert-warning" : "alert-success") alert-dismissible fade show" role="alert">
            <strong>Add to Selection Result</strong>
            <p class="mb-1">Added @_addToSelectionResult.AddedCount submissions to selection.</p>
            @if (_addToSelectionResult.SkippedSubmissions.Length > 0)
            {
                <p class="mb-1">Skipped @_addToSelectionResult.SkippedSubmissions.Length submissions:</p>
                <ul class="mb-0">
                    @foreach (SkippedSubmissionInfo skipped in _addToSelectionResult.SkippedSubmissions)
                    {
                        <li>@skipped.UserDisplayName (#@skipped.SubmissionNumber): @skipped.Reason</li>
                    }
                </ul>
            }
            <button type="button" class="btn-close" @onclick="() => _showResultAlert = false" aria-label="Close"></button>
        </div>
    }
</BodyEndPortal>

@code {
    [Parameter]
    public Guid CreatorId { get; set; }

    [Parameter]
    public Guid QuestionnaireId { get; set; }

    [Parameter]
    public required QuestionnaireConfigModel QuestionnaireConfig { get; set; }

    [Parameter]
    public List<SubmissionLabelModel> PossibleLabels { get; set; } = [];

    [Parameter] 
    public bool IsUpdatingLabels { get; set; }
    
    [Parameter]
    public EventCallback<bool> IsUpdatingLabelsChanged { get; set; }
    
    [Parameter]
    public IEnumerable<SubmissionTableItemModel> SelectedItems { get; set; } = [];
    
    [Parameter]
    public EventCallback<(SubmissionTableItemModel, SubmissionLabelModel)> OnLabelAdded { get; set; }
    
    [Parameter]
    public EventCallback<(SubmissionTableItemModel, SubmissionLabelModel)> OnLabelRemoved { get; set; }

    private LabelPickerModal? _applyLabelModal;
    private LabelPickerModal? _removeLabelModal;
    private SelectionSeriesPickerModal? _selectionSeriesModal;

    private List<SelectionSeriesModel> _selectionSeries = [];
    private ManualAddEntriesResponse? _addToSelectionResult;
    private bool _showResultAlert;

    private string BulkDownloadsSubmissionQuery
        => string.Join("&", SelectedItems.Select(item => "n=" + item.Number));

    private async Task ApplyLabel(SubmissionLabelModel label)
    {
        await _applyLabelModal!.HideAsync();
        await MutateLabelPresence(label, true);
    }

    private async Task RemoveLabel(SubmissionLabelModel label)
    {
        await _removeLabelModal!.HideAsync();
        await MutateLabelPresence(label, false);
    }

    private async Task MutateLabelPresence(SubmissionLabelModel label, bool newPresence)
    {
        HttpClient httpClient = HttpClientProvider.HttpClient;

        await IsUpdatingLabelsChanged.InvokeAsync(true);
        try
        {
            await SelectedItems
                .Select(async item =>
                {
                    // Skip submission if there is no change to be done
                    if (newPresence && item.Labels.Any(l => l.Id == label.Id)) return;
                    if (!newPresence && item.Labels.All(l => l.Id != label.Id)) return;

                    HttpResponseMessage response = await httpClient.PostAsJsonAsync(
                        ApiEndpointPaths.SubmissionLabelsPresenceMutate,
                        new MutateLabelPresenceRequest
                        {
                            LabelId = label.Id,
                            SubmissionId = item.Id,

                            NewPresent = newPresence,
                        }
                    );

                    // TODO: toasts
                    response.EnsureSuccessStatusCode();

                    // Update the in-memory item to reflect the change
                    if (newPresence) await OnLabelAdded.InvokeAsync((item, label));
                    else await OnLabelRemoved.InvokeAsync((item, label));
                })
                .WhenAll();
        }
        finally
        {
            await IsUpdatingLabelsChanged.InvokeAsync(false);
            StateHasChanged();
        }
    }

    private async Task LoadSelectionSeriesAndShowModal()
    {
        HttpClient httpClient = HttpClientProvider.HttpClient;

        try
        {
            SelectionSeriesListRequest listRequest = new()
            {
                QuestionnaireId = QuestionnaireId,
            };

            HttpResponseMessage response = await httpClient.PostAsJsonAsync(
                ApiEndpointPaths.SelectionSeriesList,
                listRequest
            );
            
            if (response.IsSuccessStatusCode)
            {
                SelectionSeriesModel[]? series = await response.Content.ReadFromJsonAsync<SelectionSeriesModel[]>();
                _selectionSeries = series?.ToList() ?? [];
            }
            else
            {
                // Fallback - use empty list
                _selectionSeries = [];
            }

            await _selectionSeriesModal!.ShowAsync();
        }
        catch
        {
            // TODO: proper error handling
            _selectionSeries = [];
            await _selectionSeriesModal!.ShowAsync();
        }
    }

    private async Task AddToSelection(SelectionSeriesModel series)
    {
        await _selectionSeriesModal!.HideAsync();

        HttpClient httpClient = HttpClientProvider.HttpClient;

        await IsUpdatingLabelsChanged.InvokeAsync(true);
        try
        {
            ManualAddEntriesRequest request = new()
            {
                SeriesId = series.Id,
                SubmissionIds = SelectedItems.Select(item => item.Id).ToArray(),
            };

            HttpResponseMessage response = await httpClient.PostAsJsonAsync(
                ApiEndpointPaths.SelectionManualAddEntries,
                request
            );

            response.EnsureSuccessStatusCode();

            _addToSelectionResult = await response.Content.ReadFromJsonAsync<ManualAddEntriesResponse>();
            _showResultAlert = true;
        }
        finally
        {
            await IsUpdatingLabelsChanged.InvokeAsync(false);
            StateHasChanged();
        }
    }
}
