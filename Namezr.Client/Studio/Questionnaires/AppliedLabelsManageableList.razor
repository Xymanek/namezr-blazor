@rendermode InteractiveWebAssembly

@using Namezr.Client.Infra
@using Namezr.Client.Shared

@inject ISpaHttpClientProvider HttpClientProvider

<div class="d-flex flex-row flex-wrap gap-2">
    @foreach (SubmissionLabelModel label in AppliedLabels)
    {
        <SubmissionLabelPresenter
            Label="label"
        >
            <HxButton
                Icon="BootstrapIcon.Trash"
                Tooltip="Remove"
                TooltipPlacement="TooltipPlacement.Bottom"
                OnClick="_ => RemoveLabel(label)"
            />
        </SubmissionLabelPresenter>
    }

    @if (AppliedLabels.Count == 0)
    {
        <i>Currently none</i>
    }

    <HxButton
        Icon="BootstrapIcon.Plus"
        Outline="true"
        Color="ThemeColor.Secondary"
    />
</div>

<HxModal @ref="_applyLabelModal" CloseOnEscape="!_isSubmitting" ShowCloseButton="!_isSubmitting">
    <BodyTemplate>
        <HxListGroup Flush="true">
            @foreach (SubmissionLabelModel label in GetApplyableLabels())
            {
                <HxListGroupItem OnClick="() => ApplyLabel(label)">
                    <SubmissionLabelPresenter
                        Label="label"
                    />
                </HxListGroupItem>
            }
        </HxListGroup>

        @if (_isSubmitting)
        {
            <p>Working...</p>
        }
    </BodyTemplate>
</HxModal>

@code {
    private HxModal? _applyLabelModal;

    [Parameter]
    public Guid SubmissionId { get; set; }

    [Parameter]
    public List<SubmissionLabelModel> AppliedLabels { get; set; } = [];

    [Parameter]
    public List<SubmissionLabelModel> PossibleLabels { get; set; } = [];

    private bool _isSubmitting;

    private IEnumerable<SubmissionLabelModel> GetApplyableLabels()
    {
        return PossibleLabels
            .ExceptBy(AppliedLabels.Select(label => label.Id), label => label.Id);
    }

    private async Task ApplyLabel(SubmissionLabelModel label)
    {
        await DoUpdatePresence(label, true);
        await _applyLabelModal!.HideAsync();
    }

    private async Task RemoveLabel(SubmissionLabelModel label)
    {
        await DoUpdatePresence(label, false);
    }

    private async Task DoUpdatePresence(SubmissionLabelModel label, bool newPresent)
    {
        HttpClient httpClient = HttpClientProvider.HttpClient;

        _isSubmitting = true;
        try
        {
            HttpResponseMessage response = await httpClient.PostAsJsonAsync(
                ApiEndpointPaths.SubmissionLabelsPresenceMutate,
                new MutateLabelPresenceRequest
                {
                    LabelId = label.Id,
                    SubmissionId = SubmissionId,

                    NewPresent = newPresent,
                }
            );

            // TODO: toasts
            response.EnsureSuccessStatusCode();
        }
        finally
        {
            _isSubmitting = false;
        }
    }

}