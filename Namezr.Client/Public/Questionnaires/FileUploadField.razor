@using System.Net.Http.Headers
@using Namezr.Client.Infra
@using Namezr.Client.Types

@inherits Editor<SubmissionValueModel>

@inject ISpaHttpClientProvider HttpClientProvider

<h5>@FieldConfig.Title</h5>

@if (CanAddMoreFiles)
{
    <InputFile
        Multiple="@(FieldConfig.FileUploadOptions!.MaxItemCount > 1)"
        OnChange="OnFilesSelected"
    />
    @*<HxInputFileDropZone
        MaxFileSize=@(FieldConfig.FileUploadOptions!.MaxItemSizeBytes)
        Multiple="FieldConfig.FileUploadOptions!.MaxItemCount > 1"
        OnChange="OnFilesSelected"
    />*@
}

<table class="table table-striped">
    @if (_uploadedFiles.Count > 0)
    {
        <thead>
        <tr>
            <th>File name</th>
            <th>Size</th>
            <th></th>
        </tr>
        </thead>
    }
    <tbody>
    @foreach (UploadedFileInfo file in _uploadedFiles)
    {
        <tr>
            <td>
                <a href=@(GetDownloadUrl(file)) target="_blank">
                    @file.Name
                </a>
            </td>
            <td><i>@file.SizeBytes bytes</i></td>

            <td>
                <HxButton
                    Icon="@BootstrapIcon.Trash"
                    Color="ThemeColor.Danger"
                    Tooltip="Remove"
                    OnClick="() => RemoveFile(file.Id)"/>
            </td>
        </tr>
    }

    @if (_uploadsInProgress.Count > 0)
    {
        <tr>
            <td colspan="3">Uploading...</td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public required QuestionnaireConfigFieldModel FieldConfig { get; set; }

    [Parameter]
    public required string FileUploadTicket { get; set; }

    [Parameter]
    public EventCallback<string> OnNewFileTicket { get; set; }

    private readonly HashSet<IBrowserFile> _uploadsInProgress = [];
    private readonly List<UploadedFileInfo> _uploadedFiles = [];

    private string GetDownloadUrl(UploadedFileInfo file)
    {
        if (file.NewFileTicket is null)
        {
            // TODO
            return "#";
        }

        return $"{ApiEndpointPaths.FilesDownloadNew}?ticket={file.NewFileTicket}";
    }

    private int MoreFilesAllowed
    {
        get
        {
            int speculativeCurrentCount = (Value.FileValue?.Count ?? 0) + _uploadsInProgress.Count;

            return FieldConfig.FileUploadOptions!.MaxItemCount - speculativeCurrentCount;
        }
    }

    private bool CanAddMoreFiles => MoreFilesAllowed > 0;

    private string UploadUrl => $"{ApiEndpointPaths.FilesUpload}?ticket={FileUploadTicket}";

    // private HxInputFileDropZone _dropZone;

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        // TODO: validate

        // await _dropZone.UploadAsync();

        IEnumerable<Task> tasks = e.GetMultipleFiles(MoreFilesAllowed)
            .Select(async file =>
            {
                _uploadsInProgress.Add(file);

                try
                {
                    using MultipartFormDataContent content = new();

                    StreamContent fileContent = new(file.OpenReadStream(
                        FieldConfig.FileUploadOptions!.MaxItemSizeBytes ??
                        AbsoluteMaxFileSize
                    ));

                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"file\"",
                        fileName: file.Name
                    );

                    HttpRequestMessage request = new(HttpMethod.Post, UploadUrl);
                    // request.SetBrowserRequestStreamingEnabled(true);// TODO
                    request.Content = content;

                    HttpResponseMessage response = await HttpClientProvider.HttpClient.SendAsync(request);

                    // TODO: gracefully handle errors
                    response.EnsureSuccessStatusCode();

                    NewFileResult result = (await response.Content.ReadFromJsonAsync<NewFileResult>())!;

                    Value.FileValue ??= new();
                    Value.FileValue.Add(result.FileId);

                    _uploadedFiles.Add(new UploadedFileInfo
                    {
                        Id = result.FileId,
                        NewFileTicket = result.Ticket,

                        Name = file.Name,
                        SizeBytes = file.Size,
                    });

                    await OnNewFileTicket.InvokeAsync(result.Ticket);
                }
                finally
                {
                    _uploadsInProgress.Remove(file);
                }
            });

        await Task.WhenAll(tasks);
    }

    // TODO: actual limit
    // TODO: reference in UI, on server, etc.
    private const long AbsoluteMaxFileSize = 5 * 1024 * 1024; // 5 MB

    private void RemoveFile(Guid fileId)
    {
        Value.FileValue ??= new();
        Value.FileValue.Remove(fileId);

        _uploadedFiles.RemoveAll(x => x.Id == fileId);
    }

    private class UploadedFileInfo
    {
        public required Guid Id { get; init; }
        public string? NewFileTicket { get; init; }

        public required string Name { get; init; }
        public required long SizeBytes { get; init; }
    }

}