@using FluentValidation
@using Namezr.Client.Studio.Questionnaires.Edit
@using vNext.BlazorComponents.FluentValidation

@rendermode InteractiveWebAssembly

<h3>SubmissionEditor</h3>

<EditForm Model="Values">
    <FluentValidationValidator Validator="Validator"/>

    <h1>@Config.Title</h1>

    @if (Config.Description is not null)
    {
        <p>@Config.Description</p>
    }

    <ul>
        @foreach (QuestionnaireConfigFieldModel field in Config.Fields)
        {
            string fieldIdStr = field.Id.ToString();

            if (FieldValidatorProviders.TryGetValue(fieldIdStr, out FieldValidatorProvider? validatorProvider))
            {
                <FluentValidationValidator ValidatorFactory="validatorProvider"/>
            }
            
            <li>
                <strong>@field.Title</strong>
                <br/>
                @field.Description
                <br/>

                @switch (field.Type)
                {
                    case QuestionnaireFieldType.Text:
                        <HxInputText
                            @bind-Value="Values[fieldIdStr].StringValue"
                        />
                        break;

                    case QuestionnaireFieldType.Number:
                        <HxInputNumber
                            @bind-Value="Values[fieldIdStr].NumberValue"
                        />
                        break;

                    case QuestionnaireFieldType.FileUpload:
                        @*<HxInputFile/>*@
                        /* TODO: file upload */
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </li>
        }
    </ul>

    <HxSubmit
        Text="Submit"
        Color="@ThemeColor.Primary"
        Enabled="RendererInfo.IsInteractive"
    />
</EditForm>

@code {

    [Parameter]
    public required QuestionnaireConfigModel Config { get; init; }

    private Dictionary<string, SubmissionValueModel> Values { get; } = new();

    private IReadOnlyDictionary<string, FieldValidatorProvider> FieldValidatorProviders { get; set; } = null!;
    private IValidator Validator { get; set; } = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        foreach (QuestionnaireConfigFieldModel field in Config.Fields)
        {
            Values.TryAdd(field.Id.ToString(), new SubmissionValueModel());
        }

        // TODO: explain why we need to do this
        
        IReadOnlyDictionary<string, IValidator<SubmissionValueModel>> fieldValidatorMap 
            = SubmissionModelValidator.CreateRuleMap(Config);

        FieldValidatorProviders = fieldValidatorMap
            .ToDictionary(x => x.Key, x => new FieldValidatorProvider
            {
                Validator = x.Value,
                Model = Values[x.Key],
            });

        Validator = new SubmissionModelValidator(fieldValidatorMap);
    }

}