@using FluentValidation
@using Namezr.Client.Infra
@using Namezr.Client.Studio.Questionnaires.Edit
@using vNext.BlazorComponents.FluentValidation

@rendermode InteractiveWebAssembly

@inject ISpaHttpClientProvider HttpClientProvider

<h3>SubmissionEditor</h3>

<EditForm Model="Values" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator Validator="Validator"/>

    <h1>@Config.Title</h1>

    @if (Config.Description is not null)
    {
        <p>@Config.Description</p>
    }

    <ul>
        @foreach (QuestionnaireConfigFieldModel field in Config.Fields)
        {
            string fieldIdStr = field.Id.ToString();

            if (FieldValidatorProviders.TryGetValue(fieldIdStr, out FieldValidatorProvider? validatorProvider))
            {
                <FluentValidationValidator ValidatorFactory="validatorProvider"/>
            }

            <li>
                <strong>@field.Title</strong>
                <br/>
                @field.Description
                <br/>

                @switch (field.Type)
                {
                    case QuestionnaireFieldType.Text:
                        <HxInputText
                            @bind-Value="Values[fieldIdStr].StringValue"
                        />
                        break;

                    case QuestionnaireFieldType.Number:
                        <HxInputNumber
                            @bind-Value="Values[fieldIdStr].NumberValue"
                        />
                        break;

                    case QuestionnaireFieldType.FileUpload:
                        @*<HxInputFile/>*@
                        /* TODO: file upload */
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </li>
        }
    </ul>

    <HxSubmit
        Text="Submit"
        Color="@ThemeColor.Primary"
        Enabled="RendererInfo.IsInteractive"
        Spinner="IsSending"
    />
</EditForm>

@code {

    [Parameter]
    public required Guid QuestionnaireVersionId { get; init; }
    
    [Parameter]
    public required QuestionnaireConfigModel Config { get; init; }

    private Dictionary<string, SubmissionValueModel> Values { get; } = new();

    /// <summary>
    /// <para>
    /// The <see cref="P:Microsoft.AspNetCore.Components.Forms.FieldChangedEventArgs.FieldIdentifier"/> that
    /// the validator(s) get "starts" with the <see cref="SubmissionValueModel"/> as the model
    /// so they cannot figure out the path from the root of the form.
    /// </para>
    /// <para>
    /// So we abuse <see cref="vNext.BlazorComponents.FluentValidation.IValidatorFactory"/> and the ability
    /// to register multiple validators for the same form to "supplement" the root validator.
    /// </para>
    /// </summary>
    // TODO: Create GH issues (with child enrolment example)- aspnet (Blazor), vNext.BlazorComponents.FluentValidation
    // TODO: FluentValidationValidator does not unsubscribe when removed
    private IReadOnlyDictionary<string, FieldValidatorProvider> FieldValidatorProviders { get; set; } = null!;

    private IValidator Validator { get; set; } = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        foreach (QuestionnaireConfigFieldModel field in Config.Fields)
        {
            Values.TryAdd(field.Id.ToString(), new SubmissionValueModel());
        }

        IReadOnlyDictionary<string, IValidator<SubmissionValueModel>> fieldValidatorMap
            = SubmissionModelValidator.CreateRuleMap(Config);

        FieldValidatorProviders = fieldValidatorMap
            .ToDictionary(x => x.Key, x => new FieldValidatorProvider
            {
                Validator = x.Value,
                Model = Values[x.Key],
            });

        Validator = new SubmissionModelValidator(fieldValidatorMap);
    }

    private bool? IsSending { get; set; }
    
    private async Task HandleValidSubmit()
    {
        IsSending = true;
        try
        {
            await HttpClientProvider.HttpClient.PostAsJsonAsync(
                ApiEndpointPaths.QuestionnaireSubmissionCreate,
                new SubmissionCreateModel
                {
                    QuestionnaireVersionId = QuestionnaireVersionId,
                    Values = Values.ToDictionary(x => Guid.Parse(x.Key), x => x.Value),
                }
            );
        }
        finally
        {
            IsSending = false;
            StateHasChanged();
        }
    }

}